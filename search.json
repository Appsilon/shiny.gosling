[{"path":"https://appsilon.github.io/shiny.gosling/articles/GRanges.html","id":"section-call-required-libraries-","dir":"Articles","previous_headings":"","what":"Call required libraries.","title":"2. Using a GRanges object in shiny.gosling","text":"","code":"require(shiny.gosling) require(shiny) require(GenomicRanges)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/GRanges.html","id":"section-getting-a-sample-data-for-the-granges-object","dir":"Articles","previous_headings":"","what":"Getting a sample data for the GRanges object","title":"2. Using a GRanges object in shiny.gosling","text":"loading peaks data ChipSeq dataset GEO accession GSM1295076 GSM1295076_CBX6_BF_ChipSeq_mergedReps_peaks.bed.gz file used create sample GRanges object.","code":"url <- \"https://rb.gy/7y3fx\" temp_file <- file.path(tempdir(), \"data.gz\") download.file(url, destfile = temp_file, method = \"auto\", mode = \"wb\") df <- read.delim(   temp_file,   header = FALSE,   comment.char = \"#\",   sep = \"\" ) gr <- GRanges(   seqnames = df$V1,   ranges = IRanges(df$V2, df$V3) ) gr"},{"path":[]},{"path":"https://appsilon.github.io/shiny.gosling/articles/GRanges.html","id":"section-method-1---using-the-track_data_gr-function","dir":"Articles","previous_headings":"Using the GRanges object for a plot using shiny.gosling","what":"Method 1 - Using the track_data_gr function","title":"2. Using a GRanges object in shiny.gosling","text":"can use track_data_gr pass GRanges object inside track. Note: Make sure run Shiny app using shiny::runApp() rather interactively running shiny::shinyApp() object.","code":"ui <- fluidPage(   use_gosling(clear_files = FALSE),   goslingOutput(\"gosling_plot\") )  track_1 <- add_single_track(   width = 800,   height = 180,   data = track_data_gr(     gr, chromosomeField = \"seqnames\",     genomicFields = c(\"start\", \"end\")   ),   mark = \"bar\",   x = visual_channel_x(     field = \"start\", type = \"genomic\", axis = \"bottom\"   ),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   y = visual_channel_y(     field = \"width\", type = \"quantitative\", axis = \"right\"   ),   size = list(value = 5) )  composed_view <- compose_view(   layout = \"linear\",   tracks = track_1 )  arranged_view <- arrange_views(   title = \"Basic Marks: bar\",   subtitle = \"Tutorial Examples\",   views = composed_view )  server <- function(input, output, session) {   output$gosling_plot <- renderGosling({     gosling(       component_id = \"component_1\",       arranged_view     )   }) }  shiny::shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/GRanges.html","id":"section-method-2---using-the-track_data_csv-function","dir":"Articles","previous_headings":"Using the GRanges object for a plot using shiny.gosling","what":"Method 2 - Using the track_data_csv function","title":"2. Using a GRanges object in shiny.gosling","text":"can save GRanges object csv file inside www directory can used shiny.gosling plot.","code":"if (!dir.exists(\"data\")) {   dir.create(\"data\") } utils::write.csv(gr, \"data/ChipSeqPeaks.csv\", row.names = FALSE)  track_1 <- add_single_track(   width = 800,   height = 180,   data = track_data_csv(     \"data/ChipSeqPeaks.csv\", chromosomeField = \"seqnames\",     genomicFields = c(\"start\", \"end\")   ),   mark = \"bar\",   x = visual_channel_x(     field = \"start\", type = \"genomic\", axis = \"bottom\"   ),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   y = visual_channel_y(     field = \"width\", type = \"quantitative\", axis = \"right\"   ),   size = list(value = 5) )  composed_view <- compose_view(   layout = \"linear\",   tracks = track_1 )  arranged_view <- arrange_views(   title = \"Basic Marks: bar\",   subtitle = \"Tutorial Examples\",   views = composed_view )  shiny::shinyApp(ui = fluidPage(   use_gosling(clear_files = FALSE),   goslingOutput(\"gosling_plot\") ), server = function(input, output, session) {   output$gosling_plot <- renderGosling({     gosling(       component_id = \"component_1\",       arranged_view     )   }) }, options = list(height = 1000))"},{"path":"https://appsilon.github.io/shiny.gosling/articles/GRanges.html","id":"section-session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"2. Using a GRanges object in shiny.gosling","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.44        rlang_1.1.1       ##  [5] xfun_0.40         stringi_1.7.12    purrr_1.0.2       promises_1.2.1    ##  [9] textshaping_0.3.6 shiny_1.7.5       xtable_1.8-4      jsonlite_1.8.7    ## [13] glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.6   httpuv_1.6.11     ## [17] ragg_1.2.5        sass_0.4.7        rmarkdown_2.25    evaluate_0.21     ## [21] jquerylib_0.1.4   ellipsis_0.3.2    fastmap_1.1.1     yaml_2.3.7        ## [25] lifecycle_1.0.3   memoise_2.0.1     stringr_1.5.0     compiler_4.3.1    ## [29] fs_1.6.3          Rcpp_1.0.11       later_1.3.1       systemfonts_1.0.4 ## [33] digest_0.6.33     R6_2.5.1          magrittr_2.0.3    bslib_0.5.1       ## [37] tools_4.3.1       mime_0.12         pkgdown_2.0.7     cachem_1.0.8      ## [41] desc_1.4.2"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-libraries-and-initialization","dir":"Articles","previous_headings":"","what":"Libraries and Initialization","title":"3. Creating a Circos Plot with VCF Data","text":"First, load necessary libraries analysis, including StructuralVariantAnnotation, ggbio, shiny, shiny.gosling. also initialize shiny.gosling package using use_gosling() function.","code":"require(StructuralVariantAnnotation) require(ggbio) require(shiny) require(shiny.gosling) use_gosling()"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-loading-vcf-data","dir":"Articles","previous_headings":"","what":"Loading VCF Data","title":"3. Creating a Circos Plot with VCF Data","text":"start loading VCF data using readVcf function VariantAnnotation package. data represents structural variant information. loaded data converted breakpoint GRanges notation using breakpointRanges function. StructuralVariantAnnotation built top Bioconductor package VariantAnnotation. VCF files loaded using VariantAnnotation::readVcf, converted breakpoint GRanges notation using breakpointRanges non-structural variants single nucleotide variants VCF silently ignored StructuralVariantAnnotation. information VCF objects can found consulting vignettes VariantAnnotation package browseVignettes(“VariantAnnotation”). Colo829, human cell line primarily derived skin tissue affected melanoma, type malignant skin cancer. cell line maintained distributed American Type Culture Collection (ATCC) product name “COLO 829.” unique identifier Catalog Number CRL-1974. Colo829 cell line established 45-year-old male patient melanoma, making important resource research study particular disease. cells preserved frozen state, allowing long-term storage viability. cells classified fibroblast-like, indicates morphological functional characteristics similar fibroblasts, type connective tissue cell involved wound healing extracellular matrix production. Biosafety Level 1, Colo829 considered safe handle work standard laboratory conditions. makes accessible wider range researchers laboratories. primary application Colo829 3D cell culture experiments, can used model melanoma study interactions cancer cells surrounding environment physiologically relevant setting. human cell line Homo sapiens origin, Colo829 valuable tool studying human-specific processes responses. tissue origin skin makes particularly relevant melanoma research, disease primarily affects skin cells. Overall, Colo829 well-characterized cell line holds significance field melanoma research offers versatile platform investigating various aspects cancer biology therapeutic development. See info cell line https://www.cellosaurus.org/CVCL_1137","code":"colo829_vcf <- VariantAnnotation::readVcf(   system.file(     \"extdata\",     \"COLO829T.purple.sv.ann.vcf.gz\",     package = \"StructuralVariantAnnotation\"   ) ) colo829_bpgr <- breakpointRanges(colo829_vcf)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-visualizing-breakpoint-pairs-via-circos-plots","dir":"Articles","previous_headings":"","what":"Visualizing breakpoint pairs via circos plots","title":"3. Creating a Circos Plot with VCF Data","text":"can visualize breakpoints circos plot. plot structural variant breakpoints circos plot using shiny.gosling, need first prepare breakpoint GRanges. function requires special column, indicating end link using GRanges format. chunk code manipulating genomic ranges represented ‘granges’ object named ‘colo829_bpgr’ create circular visualization layout using ‘biovizBase’ package. goal subset genomic ranges relevant human genome version ‘hg19sub’ convert ranges circular layout.","code":"# In this line, a subset of genomic ranges is extracted from the object # colo829_bpgr. The subset is obtained by filtering based on the sequence # names (seqnames) present in colo829_bpgr that are also found in the # sequence levels (seqlevels) of the hg19sub reference genome from the # biovizBase package. colo829_bpgr is assumed to be a GenomicRanges object # containing genomic regions. gr_circos <- colo829_bpgr[seqnames(colo829_bpgr) %in% seqlevels(biovizBase::hg19sub)]  # This line updates the sequence levels of the gr_circos object to match # those of the hg19sub reference genome. It ensures that the genomic ranges # in gr_circos align properly with the reference genome. seqlevels(gr_circos) <- seqlevels(biovizBase::hg19sub)  # Here, the metadata columns (mcols) of the gr_circos object are updated # with additional information. Specifically, a new column called \"to.gr\" is # added, and its values are assigned using the granges function on the # partner genomic ranges of gr_circos. mcols(gr_circos)$to.gr <- granges(partner(gr_circos))"},{"path":[]},{"path":[]},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-track-1","dir":"Articles","previous_headings":"Using the GRanges object for a circos plot using shiny.gosling > Setup Tracks","what":"Track 1","title":"3. Creating a Circos Plot with VCF Data","text":"3 tracks circos plot. outermost layer displays width sequence bar plot maroon. track , first give id. following line, assign title . title displayed top rings. Next, prepare pass data track_data_gr, takes GRanges object, chromosome field names genomic field names. set mark bar need simple bar plot . define x y via visual_channel_x visual_channel_y. Finally, set color bar plot width & height.","code":"track1 <- add_single_track(   id = \"track1\",   title = \"Quality\",   data = track_data_gr(     gr_circos, chromosomeField = \"seqnames\",     genomicFields = c(\"start\", \"end\")   ),   mark = \"bar\",   x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"bottom\"),   y = visual_channel_y(field = \"QUAL\", type = \"quantitative\", axis = \"right\"),   color = visual_channel_color(     value = \"#BB3114\"   ),   width = 700,   height = 100 )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-track-2","dir":"Articles","previous_headings":"Using the GRanges object for a circos plot using shiny.gosling > Setup Tracks","what":"Track 2","title":"3. Creating a Circos Plot with VCF Data","text":"middle layer plots start sequence end. layer, begin similarly setting id title layer. Next pass data object data change. data can used . just need pass appropriate chromosomeField genomicFields. set mark = \"rect\" want fill ring color data certain value. called ideograms. set strokeWidth 0.5. set stroke different colors based value field argument. Since “REF” passed field, 4 values: , C, G T, set domain range accordingly. corresponds color #73A97D . Finally, set x xe. Since rect ( rectangle ) plot, x xe y.","code":"track2 <- add_single_track(   id = \"track2\",   title = \"REF\",   data = track_data_gr(     gr_circos, chromosomeField = \"seqnames\",     genomicFields = c(\"start\", \"end\")   ),   mark = \"rect\",   strokeWidth = visual_channel_stroke_width(     value = 0.5   ),   stroke = visual_channel_stroke(     field = \"REF\",     type = \"nominal\",     domain = list(\"A\", \"C\", \"G\", \"T\"),     range = list(\"#73A97D\", \"#C1BB78\", \"#1F5E89\", \"#CF784B\")   ),   x = visual_channel_x(field = \"start\", type = \"genomic\"),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   width = 700,   height = 100 )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-track-3","dir":"Articles","previous_headings":"Using the GRanges object for a circos plot using shiny.gosling > Setup Tracks","what":"Track 3","title":"3. Creating a Circos Plot with VCF Data","text":"Finally, innermost layer shows changes sequences. last layer, start setting id title. set data track_data_gr now set chromosomeField genomicFields .gr columns. also set longToWideId. spread data based event column. new data double number columns new column every existing column suffix _2. .gr.start corresponding column .gr.start_2 added DB. essentially widening dataset. set alignment overlay, want tracks plotted top . add 2 sub-tracks track. sub-tracks inherits data parent track. tracks set mark = \"withinLink\" 2 tracks linked . set x, xe, x1 x1e refer correct columns data. first sub-track traces variations part ch10 second sub-track traces ones part ch10. first sub-track trace gray color second sub-track trace various colors based sequence name. end also specify width, height stroke width.","code":"track3 <- add_single_track(   id = \"track3\",   title = \"Highlight similarities of Chr 10 with others\",   data = track_data_gr(     gr_circos, chromosomeField = \"to.gr.seqnames\",     genomicFields = c(\"to.gr.start\", \"to.gr.end\"),     longToWideId = \"event\"   ),   alignment = \"overlay\",   opacity = visual_channel_opacity(     value = 0.4   ),   tracks = add_multi_tracks(     add_single_track(       dataTransform = track_data_transform(         type = \"filter\", field = \"to.gr.seqnames\", oneOf = list(\"10\"), not = TRUE       ),       mark = \"withinLink\",       x = visual_channel_x(         field = \"to.gr.start\", type = \"genomic\"       ),       xe = visual_channel_x(         field = \"to.gr.start_2\", type = \"genomic\"       ),       x1 = visual_channel_x(         field = \"to.gr.end\", type = \"genomic\"       ),       x1e = visual_channel_x(         field = \"to.gr.end_2\", type = \"genomic\"       ),       stroke = visual_channel_stroke(         value = \"lightgray\"       ),       strokeWidth = visual_channel_stroke_width(         value = 1       )     ),     add_single_track(       dataTransform = track_data_transform(         type = \"filter\", field = \"to.gr.seqnames\", oneOf = list(\"10\")       ),       mark = \"withinLink\",       x = visual_channel_x(         field = \"to.gr.start\", type = \"genomic\"       ),       xe = visual_channel_x(         field = \"to.gr.start_2\", type = \"genomic\"       ),       x1 = visual_channel_x(         field = \"to.gr.end\", type = \"genomic\"       ),       x1e = visual_channel_x(         field = \"to.gr.end_2\", type = \"genomic\"       ),       stroke = visual_channel_stroke(         field = \"to.gr.seqnames_2\",         type = \"nominal\",         range = c(           \"#E79F00\", \"#029F73\", \"#0072B2\", \"#CB7AA7\", \"#D45E00\",           \"#57B4E9\", \"#EFE441\"         )       ),       strokeWidth = visual_channel_stroke_width(         value = 1.5       )     )   ),   width = 700,   height = 200 )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-final-view","dir":"Articles","previous_headings":"Using the GRanges object for a circos plot using shiny.gosling > Setup Tracks","what":"Final View","title":"3. Creating a Circos Plot with VCF Data","text":"Finally put 3 main tracks together along parameters control layout style, alignment .","code":"single_composed_track <- compose_view(   title = \"Circos\",   subtitle = \"http://circos.ca/intro/genomic_data/\",   layout = \"circular\",   static = TRUE,   spacing = 1,   centerRadius = 0.3,   alignment = \"stack\",   multi = TRUE,   tracks = add_multi_tracks(track1, track2, track3) )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-run-app","dir":"Articles","previous_headings":"Using the GRanges object for a circos plot using shiny.gosling > Setup Tracks","what":"Run App","title":"3. Creating a Circos Plot with VCF Data","text":"put shiny app.","code":"ui <- fluidPage(   use_gosling(),   fluidRow(     column(6, goslingOutput(\"gosling_plot\")),     column(       1, br(), actionButton(         \"download_pdf\",         \"PDF\",         icon = icon(\"cloud-arrow-down\")       )     )   ) )  server <- function(input, output, session) {   output$gosling_plot <- renderGosling({     gosling(       component_id = \"component_1\",       single_composed_track     )   })    observeEvent(input$download_pdf, {     export_pdf(component_id = \"component_1\")   }) }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/VCF.html","id":"section-session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"3. Creating a Circos Plot with VCF Data","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.44        rlang_1.1.1       ##  [5] xfun_0.40         stringi_1.7.12    purrr_1.0.2       promises_1.2.1    ##  [9] textshaping_0.3.6 shiny_1.7.5       xtable_1.8-4      jsonlite_1.8.7    ## [13] glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.6   httpuv_1.6.11     ## [17] ragg_1.2.5        sass_0.4.7        rmarkdown_2.25    evaluate_0.21     ## [21] jquerylib_0.1.4   ellipsis_0.3.2    fastmap_1.1.1     yaml_2.3.7        ## [25] lifecycle_1.0.3   memoise_2.0.1     stringr_1.5.0     compiler_4.3.1    ## [29] fs_1.6.3          Rcpp_1.0.11       later_1.3.1       systemfonts_1.0.4 ## [33] digest_0.6.33     R6_2.5.1          magrittr_2.0.3    bslib_0.5.1       ## [37] tools_4.3.1       mime_0.12         pkgdown_2.0.7     cachem_1.0.8      ## [41] desc_1.4.2"},{"path":"https://appsilon.github.io/shiny.gosling/articles/intro.html","id":"section-call-library-libraries-","dir":"Articles","previous_headings":"","what":"Call library libraries.","title":"1. Introduction to shiny.gosling","text":"","code":"library(shiny.gosling) library(shiny) library(sessioninfo)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/intro.html","id":"section-introduction-to-shiny-gosling","dir":"Articles","previous_headings":"","what":"Introduction to shiny.gosling","title":"1. Introduction to shiny.gosling","text":"package R shiny implementation Gosling.js library. Gosling js highly expressive library based Grammar scalable interactive Genomics Data visualization. library build upon React wrapper Gosling.js. powered Shiny.React. Thus Charts can directly build using package. Let’s start example. let’s read csv file Genomic data chromosome start stop indicators. dataset directly picked gosling-lang.org . Multivec file format introduced Higlass suitable representing visualizing multi-dimensional numerical data across genomic coordinates. ’s commonly used representing data like ChIP-seq, ATAC-seq, Hi-C, genomic experiments signals measurements collected various genomic positions. Multivec data essentially matrix rows correspond different genomic positions regions, columns correspond different samples experiments. entry matrix represents value associated specific genomic position sample. genomic positions along rows matrix usually represented chromosomal coordinates (chromosome name base pair position). allows data aligned genome, enabling accurate visualization analysis. different tools file formats support multivec data, allowing researchers work visualize type data. bigWig bedGraph formats commonly used representing multivec data. Visualization tools libraries like UCSC Genome Browser, IGV (Integrative Genomics Viewer), libraries like “shiny.gosling” can render multivec data visualizations. resources links can learn multivec data ’s used genomics research: UCSC Genome Browser: UCSC Genome Browser widely used tool visualizing genomic data, including multivec data. Tutorial visualizing multivec data UCSC Genome Browser IGV (Integrative Genomics Viewer): IGV another popular genome visualization tool supports multivec data. Tutorial loading visualizing multivec data IGV BedGraph BigWig Formats: common file formats used representing multivec data. Explanation BedGraph format Explanation BigWig format shiny.gosling can basically create tracks data create view tracks. understand build plot let’s understand 3 basic principles gosling.js Track contains data, layout, height, width aesthetics etc… One Track combine together create View One views combine together create Plot. plot created Gosling. Let’s visit one one. Let’s start creating track. Let’s define first track add properties track. shiny.gosling can specific colors ranges channel. Let’s build layers plot. can build multiple tracks represent genome. add_single_track function constructs single track inputs. track_data function used define data source track. specifies URL dataset, type data (“multivec”), various data-related parameters rows, columns, values, categories, bin size. visualization track specified using various visual channels x, xe, row, color, tooltip. compose_view function used compose single track visualization view. composed view placed within circular layout. x-domain (genomic interval) set chromosome 1, interval [1, 3000500]. can even add tracks . let’s create tracks just make better beautiful graph. use_gosling function used incorporate shiny.gosling package rendering visualization. Hovering plot show start position, end position value. Scrolling plot, zoom zoom view. Users can click PDF button download pdf current state plot.","code":"cistrome_data <- \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\" single_track <- add_single_track(   id = \"track1\",   data = track_data(     url = cistrome_data,     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4,   ),   mark = \"rect\",   x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   row = visual_channel_row(     field = \"sample\",     type = \"nominal\",     legend = TRUE   ),   color = visual_channel_color(     field = \"peak\",     type = \"quantitative\",     legend = TRUE   ),   tooltip = visual_channel_tooltips(     visual_channel_tooltip(field = \"start\", type = \"genomic\", alt = \"Start Position\"),     visual_channel_tooltip(field = \"end\", type = \"genomic\", alt = \"End Position\"),     visual_channel_tooltip(       field = \"peak\",       type = \"quantitative\",       alt = \"Value\",       format = \"0.2\"     )   ),   width = 600,   height = 130 ) single_composed_track <- compose_view(   tracks = single_track ) single_composed_views <- arrange_views(   title = \"Single Track\",   subtitle = \"This is the simplest single track visualization with a linear layout\",   layout = \"circular\",   views = single_composed_track,   xDomain = list(     chromosome = \"chr1\",     interval = c(1, 3000500)   ) ) server <- function(input, output, session) {    output$gosling_plot <- renderGosling({     gosling(       component_id = \"component_1\",       single_composed_views,       clean_braces = TRUE     )   }) }  ui <- fluidPage(   use_gosling(),   goslingOutput(\"gosling_plot\") )   shiny::shinyApp(ui, server, options = list(height = 700))"},{"path":"https://appsilon.github.io/shiny.gosling/articles/intro.html","id":"section-session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"1. Introduction to shiny.gosling","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.44        rlang_1.1.1       #>  [5] xfun_0.40         stringi_1.7.12    purrr_1.0.2       promises_1.2.1    #>  [9] textshaping_0.3.6 shiny_1.7.5       xtable_1.8-4      jsonlite_1.8.7    #> [13] glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.6   httpuv_1.6.11     #> [17] ragg_1.2.5        sass_0.4.7        rmarkdown_2.25    evaluate_0.21     #> [21] jquerylib_0.1.4   ellipsis_0.3.2    fastmap_1.1.1     yaml_2.3.7        #> [25] lifecycle_1.0.3   memoise_2.0.1     stringr_1.5.0     compiler_4.3.1    #> [29] fs_1.6.3          Rcpp_1.0.11       later_1.3.1       systemfonts_1.0.4 #> [33] digest_0.6.33     R6_2.5.1          magrittr_2.0.3    bslib_0.5.1       #> [37] tools_4.3.1       mime_0.12         pkgdown_2.0.7     cachem_1.0.8      #> [41] desc_1.4.2"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"shiny shiny.gosling packages offer powerful tools building interactive data visualizations within Shiny apps. tutorial, ’ll demonstrate process constructing interactive line chart visualization using genomic data. example leverages shiny package user interface design shiny.gosling package generating visualizations.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-understanding-multivec-data","dir":"Articles","previous_headings":"","what":"Understanding Multivec Data","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"Multivec file format introduced Higlass suitable visualizing multi-dimensional numerical data across genomic coordinates. ’s widely utilized representing various genomic experiments ChIP-seq, ATAC-seq, Hi-C, measurements taken different genomic positions. Multivec data essentially matrix rows correspond genomic positions regions, columns correspond different samples experiments. matrix entry represents value associated specific genomic position sample. genomic positions typically represented chromosomal coordinates (chromosome name base pair position), allowing accurate alignment genome. Tools like UCSC Genome Browser, IGV, libraries like shiny.gosling can visualize multivec data effectively. delve deeper multivec data application genomics, explore resources: UCSC Genome Browser: versatile tool visualizing genomic data, including multivec data. Learn visualize multivec data UCSC Genome Browser. Integrative Genomics Viewer (IGV): Another popular genome visualization tool supporting multivec data. Discover load visualize multivec data IGV. BedGraph BigWig Formats: common formats used represent multivec data. Explore explanations BedGraph BigWig formats.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-call-library-libraries-","dir":"Articles","previous_headings":"","what":"Call library libraries.","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"","code":"library(shiny) library(shiny.gosling)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-creating-the-data-object","dir":"Articles","previous_headings":"","what":"Creating the Data Object","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"’ll begin fetching multivec data using track_data function. function retrieves data specified URL, data organized matrix rows representing samples columns representing positions. ’ll define row, column, value attributes along sample categories. categories parameter contain list category names (e.g., “sample 1”).","code":"# Create data object ---- view1_data <- track_data(   url = \"https://resgen.io/api/v1/tileset_info/?d=UvVPeLHuRDiYA3qwFlm7xQ\",   type = \"multivec\",   row = \"sample\",   column = \"position\",   value = \"peak\",   categories = list(\"sample 1\") )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-constructing-the-line-chart-track","dir":"Articles","previous_headings":"","what":"Constructing the Line Chart Track","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"visualize data, ’ll define visual channels line chart. ’ll specify x-axis represent genomic positions y-axis represent peak values. add_single_track function creates line chart visualization using visual channels. Additionally, ’ll set width height plot specify data source.","code":"# Create visual channels ---- view1_x <- visual_channel_x(   field = \"position\", type = \"genomic\", axis = \"bottom\" )  view1_y <- visual_channel_y(   field = \"peak\", type = \"quantitative\", axis = \"right\" )  # Create single track ---- single_track <- add_single_track(   width = 800,   height = 180,   data = view1_data,   mark = \"line\",   x = view1_x,   y = view1_y,   size = visual_channel_size(     value = 2   ) )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-composing-and-arranging-the-view","dir":"Articles","previous_headings":"","what":"Composing and Arranging the View","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"compose_view function used create composed view contains single line chart track. layout view specified “linear”. arrange_views function arranges composed view created earlier. title subtitle arrangement specified. arranged view named single_composed_views.","code":"# Compose the track ---- single_composed_view <- compose_view(   tracks = single_track,   layout = \"linear\" )  # Arrange the view above ---- single_composed_views <- arrange_views(   title = \"Basic Marks: line\",   subtitle = \"This is a simple line chart.\",   views = single_composed_view )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-shiny-app-ui","dir":"Articles","previous_headings":"","what":"Shiny App ui","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"navbarPage function creates navigation bar top user interface. Within navigation bar, single tab panel named “Line Chart.” Inside tab panel, use_gosling function used incorporate shiny.gosling package. fluidPage function used create fluid layout within tab panel. Two columns defined: one goslingOutput another action buttons.","code":"ui <- navbarPage(   title = \"shiny.gosling\",   tabPanel(     \"Line Chart\",     use_gosling(),     fluidPage(       width = 12,       fluidRow(         column(           width = 8,           goslingOutput(\"gosling_plot_test\")         ),         column(           width = 4,           fluidRow(             column(               2,               actionButton(                 \"download_png\",                 \"PNG\",                 icon = icon(\"cloud-arrow-down\")               )             ),             column(               2,               actionButton(                 \"download_pdf\",                 \"PDF\",                 icon = icon(\"cloud-arrow-down\")               )             )           )         )       )     )   ) )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-shiny-app-server","dir":"Articles","previous_headings":"","what":"Shiny App server","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"server logic defined using server function. observeEvent functions used respond button clicks user interactions. Clicking “PNG” “PDF” buttons triggers respective download action visualization. output$gosling_plot_test function uses renderGosling render composed view using gosling function shiny.gosling package.","code":"server <- function(input, output, session) {    observeEvent(input$download_png, {     export_png(component_id = \"sars_cov2\")   })    observeEvent(input$download_pdf, {     export_pdf(component_id = \"sars_cov2\")   })    observeEvent(input$zoom_out, {     zoom_to_extent(       component_id = \"sars_cov2\",       view_id = \"view2_track1\"     )   })    output$gosling_plot_test <- renderGosling({     gosling(       component_id = \"sars_cov2\",       single_composed_views,       clean_braces = TRUE     )   }) }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/lineChart.html","id":"section-session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"4. Creating an Interactive Line Chart with shiny.gosling","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.44        rlang_1.1.1       ##  [5] xfun_0.40         stringi_1.7.12    purrr_1.0.2       promises_1.2.1    ##  [9] textshaping_0.3.6 shiny_1.7.5       xtable_1.8-4      jsonlite_1.8.7    ## [13] glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.6   httpuv_1.6.11     ## [17] ragg_1.2.5        sass_0.4.7        rmarkdown_2.25    evaluate_0.21     ## [21] jquerylib_0.1.4   ellipsis_0.3.2    fastmap_1.1.1     yaml_2.3.7        ## [25] lifecycle_1.0.3   memoise_2.0.1     stringr_1.5.0     compiler_4.3.1    ## [29] fs_1.6.3          Rcpp_1.0.11       later_1.3.1       systemfonts_1.0.4 ## [33] digest_0.6.33     R6_2.5.1          magrittr_2.0.3    bslib_0.5.1       ## [37] tools_4.3.1       mime_0.12         pkgdown_2.0.7     cachem_1.0.8      ## [41] desc_1.4.2"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-call-library-libraries","dir":"Articles","previous_headings":"","what":"Call library libraries","title":"5. Creating a Multi-Scale Sequence Track","text":"","code":"library(shiny) library(shiny.gosling)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-fetching-data","dir":"Articles","previous_headings":"","what":"Fetching Data","title":"5. Creating a Multi-Scale Sequence Track","text":", use track_data() function fetch data specified URL. data represents base counts SARS-CoV-2 virus genome, organized rows columns. includes attributes like base, position, count, categories (, T, G, C). “Multivec” term used genomics refer specific type data format used representing visualizing multi-dimensional numerical data across genomic coordinates. ’s commonly used representing data like ChIP-seq, ATAC-seq, Hi-C, genomic experiments signals measurements collected various genomic positions. Multivec data essentially matrix rows correspond different genomic positions regions, columns correspond different samples experiments. entry matrix represents value associated specific genomic position sample. genomic positions along rows matrix usually represented chromosomal coordinates (chromosome name base pair position). allows data aligned genome, enabling accurate visualization analysis. different tools file formats support multivec data, allowing researchers work visualize type data. bigWig bedGraph formats commonly used representing multivec data. Visualization tools libraries like UCSC Genome Browser, IGV (Integrative Genomics Viewer), libraries like “shiny.gosling” can render multivec data visualizations. resources links can learn multivec data ’s used genomics research: UCSC Genome Browser: UCSC Genome Browser widely used tool visualizing genomic data, including multivec data. Tutorial visualizing multivec data UCSC Genome Browser IGV (Integrative Genomics Viewer): IGV another popular genome visualization tool supports multivec data. Tutorial loading visualizing multivec data IGV BedGraph BigWig Formats: common file formats used representing multivec data. Explanation BedGraph format Explanation BigWig format","code":"track1_data <- track_data(   url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",   type = \"multivec\",   row = \"base\",   column = \"position\",   value = \"count\",   categories = c(\"A\", \"T\", \"G\", \"C\"),   start = \"start\",   end = \"end\" )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-creating-tracks","dir":"Articles","previous_headings":"","what":"Creating Tracks","title":"5. Creating a Multi-Scale Sequence Track","text":", define two tracks (track1 track2) displayed visualization. track1 displays count DNA bases using bar mark, track2 displays text annotations certain conditions.","code":"track1 <- add_single_track(   mark = \"bar\",   y = visual_channel_y(     field = \"count\", type = \"quantitative\", axis = \"none\"   ) )  track2 <- add_single_track(   dataTransform = track_data_transform(     type = \"filter\",     field = \"count\",     oneOf = list(0),     not = TRUE   ),   mark = \"text\",   x = visual_channel_x(     field = \"start\", type = \"genomic\"   ),   xe = visual_channel_x(     field = \"end\", type = \"genomic\"   ),   size = 24,   color = \"white\",   visibility = list(list(     operation = \"less-than\",     measure = \"width\",     threshold = \"|xe-x|\",     transitionPadding = 30,     target = \"mark\"   ),   list(     operation = \"LT\",     measure = \"zoomLevel\",     threshold = 40,     target = \"track\"   )) )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-defining-visual-channels","dir":"Articles","previous_headings":"","what":"Defining Visual Channels","title":"5. Creating a Multi-Scale Sequence Track","text":"Now, lets define visual channels track1. track1_x specifies genomic position x-axis, track1_color assigns colors based DNA bases, track1_text specifies text annotations based DNA bases.","code":"track1_x <- visual_channel_x(   field = \"position\", type = \"genomic\" )  track1_color <- visual_channel_color(   field = \"base\",   type = \"nominal\",   domain = c(\"A\", \"T\", \"G\", \"C\"),   legend = TRUE )  track1_text <- visual_channel_text(   field = \"base\", type = \"nominal\" )  track1_style <- default_track_styles(   inlineLegend = TRUE )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-creating-combined-track","dir":"Articles","previous_headings":"","what":"Creating combined track","title":"5. Creating a Multi-Scale Sequence Track","text":"code chunk combines previously defined tracks (track1 track2) single track (track3) specifies various properties title, alignment, data, visual channels, style.","code":"track3 <- add_single_track(   title = \"NC_045512.2 Sequence\",   alignment = \"overlay\",   data = track1_data,   tracks = add_multi_tracks(     track1, track2   ),   x = track1_x,   color = track1_color,   text = track1_text,   style = track1_style,   width = 800, height = 40 )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-creating-the-view","dir":"Articles","previous_headings":"","what":"Creating the view","title":"5. Creating a Multi-Scale Sequence Track","text":"Lets create view (view1) contains combined track (track3). specifies properties like multi-view mode, x-axis domain, alignment, linking.","code":"view1 <- compose_view(   multi = TRUE,   centerRadius = 0,   xDomain = list(interval = c(1, 29903)),   linkingId = \"detail\",   alignment = \"stack\",   tracks = add_multi_tracks(     track3   ) )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-arranging-the-view","dir":"Articles","previous_headings":"","what":"Arranging the view","title":"5. Creating a Multi-Scale Sequence Track","text":"Next, arrange views using arrange_views function. sets title, subtitle, assembly information, layout, spacing, includes previously defined view1.","code":"combined_view <- arrange_views(   title = \"SARS-CoV-2\",   subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",   assembly = list(list(\"NC_045512.2\", 29903)),   layout = \"linear\",   spacing = 50,   views = list(view1),   listify = FALSE )"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-shiny-app","dir":"Articles","previous_headings":"","what":"Shiny App","title":"5. Creating a Multi-Scale Sequence Track","text":"Finally, define Shiny user interface (UI) using fluidPage function. includes goslingOutput function create placeholder visualization. also define Shiny server logic. uses renderGosling function render interactive visualization using combined_view defined earlier.","code":"ui <- fluidPage(   use_gosling(),   fluidRow(     column(6, goslingOutput(\"gosling_plot\"))   ) )   server <- function(input, output, session) {   output$gosling_plot <- renderGosling({     gosling(       component_id = \"sars_cov2\",       combined_view     )   }) }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.gosling/articles/textAnnotation.html","id":"section-session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"5. Creating a Multi-Scale Sequence Track","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.44        rlang_1.1.1       ##  [5] xfun_0.40         stringi_1.7.12    purrr_1.0.2       promises_1.2.1    ##  [9] textshaping_0.3.6 shiny_1.7.5       xtable_1.8-4      jsonlite_1.8.7    ## [13] glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.6   httpuv_1.6.11     ## [17] ragg_1.2.5        sass_0.4.7        rmarkdown_2.25    evaluate_0.21     ## [21] jquerylib_0.1.4   ellipsis_0.3.2    fastmap_1.1.1     yaml_2.3.7        ## [25] lifecycle_1.0.3   memoise_2.0.1     stringr_1.5.0     compiler_4.3.1    ## [29] fs_1.6.3          Rcpp_1.0.11       later_1.3.1       systemfonts_1.0.4 ## [33] digest_0.6.33     R6_2.5.1          magrittr_2.0.3    bslib_0.5.1       ## [37] tools_4.3.1       mime_0.12         pkgdown_2.0.7     cachem_1.0.8      ## [41] desc_1.4.2"},{"path":"https://appsilon.github.io/shiny.gosling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Appsilon. Author, maintainer. Anirban Shaw. Author. Federico Rivadeneira. Author.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Appsilon, Shaw , Rivadeneira F (2023). shiny.gosling: Grammar-based Toolkit Scalable Interactive Genomics Data Visualization R Shiny. R package version 0.99.2.","code":"@Manual{,   title = {shiny.gosling: A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny},   author = {{Appsilon} and Anirban Shaw and Federico Rivadeneira},   year = {2023},   note = {R package version 0.99.2}, }"},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"shinygosling-","dir":"","previous_headings":"","what":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"R Shiny wrapper Gosling.js - Grammar-based Toolkit Scalable Interactive Genomics Data Visualization Based gosling.js powered shiny.react.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"install packages, run: Take look basic example app start working shiny.gosling. learn Gosling language, follow Gosling docs.","code":"remotes::install_github(\"Appsilon/shiny.react\") remotes::install_github(\"Appsilon/shiny.gosling\")"},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Use run_example function order see working examples: example run multiTrackApp example: preview ’s :","code":"run_example(\"multiTrackApp\")"},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"simple-single-track-shiny-app","dir":"","previous_headings":"Examples","what":"Simple Single Track Shiny App","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Simple Single Track Shiny App","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"interactive-circular-plot-with-linear-brush","dir":"","previous_headings":"Examples","what":"Interactive Circular Plot with Linear Brush","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Circular Plot Linear Brush","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"sars-cov-2-example","dir":"","previous_headings":"Examples","what":"SARS CoV 2 Example","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"SARS CoV 2 Example","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Explore Rhinoverse - family R packages built around Rhino!","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Gosling component — GoslingComponent","title":"Create Gosling component — GoslingComponent","text":"Create Gosling component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Gosling component — GoslingComponent","text":"","code":"GoslingComponent(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Gosling component — GoslingComponent","text":"... Name component.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Gosling component — GoslingComponent","text":"function create gosling component.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_file_to_resource_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Track data object builder for local csv files — add_file_to_resource_path","title":"Track data object builder for local csv files — add_file_to_resource_path","text":"Get object using local csv build plots","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_file_to_resource_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track data object builder for local csv files — add_file_to_resource_path","text":"","code":"add_file_to_resource_path(file_path = NULL, object = NULL)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_file_to_resource_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track data object builder for local csv files — add_file_to_resource_path","text":"file_path character. Specify file_path local csv file. object gr ranges object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_file_to_resource_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track data object builder for local csv files — add_file_to_resource_path","text":"list data specs local csv file","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual marks — add_mark","title":"Visual marks — add_mark","text":"Visual marks (e.g., points, lines, bars) basic graphical elements visualization.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual marks — add_mark","text":"","code":"add_mark(   x = NULL,   xe = NULL,   x1 = NULL,   x1e = NULL,   y = NULL,   strokeWidth = NULL,   opacity = NULL,   row = NULL,   size = NULL,   color = NULL,   stroke = NULL )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual marks — add_mark","text":"x object returned visual_channel_x(). xe object returned visual_channel_x(). x1 object returned visual_channel_x(). x1e object returned visual_channel_x(). y object returned visual_channel_y(). strokeWidth number object returned visual_channel_stroke_width(). opacity number object returned visual_channel_opacity(). row factor data column Channel row used channel y stratify visualization categorical values. size number object returned visual_channel_size(). color character object returned visual_channel_color(). stroke number object returned visual_channel_stroke().","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual marks — add_mark","text":"list mark specifications","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visual marks — add_mark","text":"info visit http://gosling-lang.org/docs/mark","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine single tracks. — add_multi_tracks","title":"Combine single tracks. — add_multi_tracks","text":"Combine single tracks.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine single tracks. — add_multi_tracks","text":"","code":"add_multi_tracks(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine single tracks. — add_multi_tracks","text":"... Multiple tracks add_single_track() function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine single tracks. — add_multi_tracks","text":"json list.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine single tracks. — add_multi_tracks","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a single track — add_single_track","title":"Add a single track — add_single_track","text":"Add single track plot mark type ( plot type ). function constructs single track inputs. inputs can id, data, mark etc. Please check gosling.js documentation usage.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a single track — add_single_track","text":"","code":"add_single_track(   id = NULL,   data = NULL,   mark = NULL,   assembly = NULL,   row = NULL,   size = NULL,   color = NULL,   strokeWidth = NULL,   opacity = NULL,   x = NULL,   xe = NULL,   x1 = NULL,   x1e = NULL,   y = NULL,   stroke = NULL,   width = NULL,   height = NULL,   dataTransform = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a single track — add_single_track","text":"id Optional argument assign id track. data object track_data() function. mark Type plot. One c(\"point\", \"line\", \"rect\", \"bar\", \"area\", \"link\", \"triangle\", \"text\"). mark type supported visual channel. Different marks support different visual channels: point: x, y, row, size, color, strokeWidth, opacity line: x, y, row, color, strokeWidth rect: x, xe, row, color, strokeWidth, opacity bar: x, y, row, color, strokeWidth, opacity area: x, y, row, color, strokeWidth link: x, xe, x1, x1e, color, opacity triangle: x, xe, row, size, color, opacity text: x, xe, row, color, opacity info visit http://gosling-lang.org/tutorials/ assembly Currently support \"hg38\", \"hg19\", \"hg18\", \"hg17\", \"hg16\", \"mm10\", \"mm9\". Defaults \"hg38\". row object visual_channel_row(). size object visual_channel_size() atomic number. color object visual_channel_color() atomic character hex code form \"#123456\". strokeWidth object visual_channel_stroke_width() atomic number. opacity object visual_channel_opacity() atomic ratio 0 1. x object visual_channel_x() atomic value. xe object visual_channel_x() atomic value. x1 object visual_channel_x() atomic value. x1e object visual_channel_x() atomic value. y object visual_channel_y() atomic value. stroke object visual_channel_stroke() function character hex color code like \"#123456\". width number interpreted units pixel. height number interpreted units pixel. dataTransform object track_data_transform() function. ... arguments passed onto gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a single track — add_single_track","text":"list object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a single track — add_single_track","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_png\",           \"PNG\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_png, {       export_png(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange views — arrange_views","title":"Arrange views — arrange_views","text":"Arrange views compose_view() function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange views — arrange_views","text":"","code":"arrange_views(layout = NULL, views = NULL, listify = TRUE, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange views — arrange_views","text":"layout One \"linear\" \"circular\". views object compose_view() function. listify Boolean. Convert views list.. ... options passed gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange views — arrange_views","text":"list object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange views — arrange_views","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"atomic_values_to_list — atomic_values_to_list","title":"atomic_values_to_list — atomic_values_to_list","text":"atomic_values_to_list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"atomic_values_to_list — atomic_values_to_list","text":"","code":"atomic_values_to_list(property_list)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"atomic_values_to_list — atomic_values_to_list","text":"property_list character number another atomic value.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"atomic_values_to_list — atomic_values_to_list","text":"List.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"style of the brush mark — brush_styles","title":"style of the brush mark — brush_styles","text":"Customize style brush mark rangeSelect mouse event.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"style of the brush mark — brush_styles","text":"","code":"brush_styles(   strokeWidth = NULL,   strokeOpacity = NULL,   stroke = NULL,   opacity = NULL,   color = NULL )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"style of the brush mark — brush_styles","text":"strokeWidth number. stroke width marks mouse events triggered. strokeOpacity number. stroke character. Stroke color marks mouse events triggered. opacity number. Opacity marks mouse events triggered. color character. Color marks mouse events triggered.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"style of the brush mark — brush_styles","text":"List object brush styles.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"style of the brush mark — brush_styles","text":"info visit http://gosling-lang.org/docs/visual-channel/#type-brush","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Build gosling spec from R list — build_json","title":"Build gosling spec from R list — build_json","text":"Build gosling spec R list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build gosling spec from R list — build_json","text":"","code":"build_json(r_list, clean_braces = TRUE, pretty = TRUE, auto_unbox = TRUE)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build gosling spec from R list — build_json","text":"r_list R list object built gosling functions clean_braces Whether remove extra square brackets json string. pretty Whether get json indentation, line breaks etc. auto_unbox TRUE automatically unbox() atomic vectors length 1.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build gosling spec from R list — build_json","text":"json spec gosling output","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":null,"dir":"Reference","previous_headings":"","what":"Create react component — component","title":"Create react component — component","text":"Create react component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create react component — component","text":"","code":"component(name)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create react component — component","text":"name name react component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create react component — component","text":"function create react element","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose views — compose_view","title":"Compose views — compose_view","text":"Compose views add_single_track() add_multi_tracks() functions.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose views — compose_view","text":"","code":"compose_view(   multi = FALSE,   layout = NULL,   width = NULL,   height = NULL,   centerRadius = NULL,   tracks,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose views — compose_view","text":"multi Whether multiple tracks view. layout One \"linear\" \"circular\". width number interpreted units pixel. height number interpreted units pixel. centerRadius Specify proportion radius center white space. number c(0,1), default=0.3 tracks tracks add_multi_tracks() function. ... arguments passed along view gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose views — compose_view","text":"list object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose views — compose_view","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Default styles for tracks — default_track_styles","title":"Default styles for tracks — default_track_styles","text":"Default styles tracks","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default styles for tracks — default_track_styles","text":"","code":"default_track_styles(   textStrokeWidth = NULL,   textStroke = NULL,   textFontWeight = NULL,   textFontSize = NULL,   textAnchor = NULL,   select = NULL,   outlineWidth = NULL,   outline = NULL,   mouseOver = NULL,   matrixExtent = NULL,   linkStyle = NULL,   linkMinHeight = NULL,   linkConnectionType = NULL,   linePattern = NULL,   legendTitle = NULL,   inlineLegend = NULL,   enableSmoothPath = NULL,   dy = NULL,   dx = NULL,   dashed = NULL,   curve = NULL,   brush = NULL,   backgroundOpacity = NULL,   background = NULL,   align = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default styles for tracks — default_track_styles","text":"textStrokeWidth number. Specify stroke width text marks. Can also specified using strokeWidth channel option text marks. textStroke character. Specify stroke text marks. Can also specified using stroke channel option text marks. textFontWeight character. One \"bold\", \"normal\". Specify font weight text marks. textFontSize number. Specify font size text marks. Can also specified using size channel option text marks. textAnchor character. One \"start\", \"middle\", \"end\". Specify alignment text marks given point. select object returned event_styles(). Customize visual effects rangeSelect events marks. outlineWidth number. outline character. mouseOver object returned event_styles(). Customize visual effects mouseOver events marks. matrixExtent character.One \"full\", \"upper-right\", \"lower-left\". Determine show one side diagonal HiGlass matrix. Default: \"full\". linkStyle character. One \"elliptical\", \"circular\", \"straight\", \"experimentalEdgeBundling\". style withinLink betweenLink marks. Default: 'circular' 'elliptical' used default option. linkMinHeight number. minimum height withinLink betweenLink marks. Unit percentage Default: 0.5. linkConnectionType character. One \"straight\", \"curve\", \"corner\". Specify connection type betweenLink marks. Default: \"corner\". linePattern list form list(size=\"number\",type=\"string\"). One \"triangleLeft\", \"triangleRight\".) Specify pattern dashes gaps rule marks. legendTitle character. defined, show legend title top left. inlineLegend Boolean. Specify whether show legend single horizontal line? enableSmoothPath Boolean. Whether enable smooth paths drawing curves. Default: FALSE. dy number. Offset position marks y direction. property currently supported text marks. dx number. Offset position marks x direction. property currently supported text marks. dashed vector number like c(1, 2). Specify pattern dashes gaps rule marks. curve character. One \"top\", \"bottom\", \"left\", \"right\". Specify curve rule marks. brush object returned brush_styles(). Customize style brush mark rangeSelect mouse event. backgroundOpacity number. background character. align character. One \"left\", \"right\". Specify alignment marks. property currently supported triangle marks. ... styles passed gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default styles for tracks — default_track_styles","text":"List object default styles.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default styles for tracks — default_track_styles","text":"info visit http://gosling-lang.org/docs/visual-channel/#style-related-properties","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default styles for tracks — default_track_styles","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Mouse event styles — event_styles","title":"Mouse event styles — event_styles","text":"styles defined applied targets mouse events, point mark user click mouse.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mouse event styles — event_styles","text":"","code":"event_styles(   strokeWidth = NULL,   strokeOpacity = NULL,   stroke = NULL,   opacity = NULL,   color = NULL,   arrange = NULL )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mouse event styles — event_styles","text":"strokeWidth number. stroke width marks mouse events triggered. strokeOpacity number. stroke character. Stroke color marks mouse events triggered. opacity number. Opacity marks mouse events triggered. color character. Color marks mouse events triggered. arrange character. One \"behind\", \"front\". Show event effects behind front marks.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mouse event styles — event_styles","text":"List object event styles.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mouse event styles — event_styles","text":"info visit http://gosling-lang.org/docs/visual-channel/#type-eventstyle","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Export PDF — export_pdf","title":"Export PDF — export_pdf","text":"Exports PDF","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export PDF — export_pdf","text":"","code":"export_pdf(   component_id,   transparent_background = FALSE,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export PDF — export_pdf","text":"component_id character. id component_id prop passed GoslingComponent function. transparent_background Boolean. Determine background transparent (Default: false). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export PDF — export_pdf","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export PDF — export_pdf","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Export PNG — export_png","title":"Export PNG — export_png","text":"Exports PNG","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export PNG — export_png","text":"","code":"export_png(   component_id,   transparent_background = FALSE,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export PNG — export_png","text":"component_id character. id component_id prop passed GoslingComponent function. transparent_background Boolean. Determine background transparent (Default: false). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export PNG — export_png","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export PNG — export_png","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_png\",           \"PNG\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_png, {       export_png(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/get_file_track_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Track data object builder for local csv files — get_file_track_data","title":"Track data object builder for local csv files — get_file_track_data","text":"Get object using local csv build plots","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/get_file_track_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track data object builder for local csv files — get_file_track_data","text":"","code":"get_file_track_data(   file_name,   chromosomeField = NULL,   genomicFields = NULL,   separator = \",\",   sampleLength = 1000,   headerNames = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/get_file_track_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track data object builder for local csv files — get_file_track_data","text":"file_name character. Specify file_name. chromosomeField character. Specify name chromosome data fields. genomicFields character vector. Specify name genomic data fields. separator character. Specify file separator, Default: ',' sampleLength number. Specify number rows loaded URL. Default: 1000 headerNames character vector. Specify names data fields CSV file header row. ... parameters passed json data object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/get_file_track_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track data object builder for local csv files — get_file_track_data","text":"list data specs local csv file","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":null,"dir":"Reference","previous_headings":"","what":"Build gosling plot object — gosling","title":"Build gosling plot object — gosling","text":"Build gosling plot object","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build gosling plot object — gosling","text":"","code":"gosling(component_id, composed_views, clean_braces = TRUE)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build gosling plot object — gosling","text":"component_id Assign component id use api like zoom. composed_views views composed arrange_views. clean_braces Whether remove extra square brackets json string.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build gosling plot object — gosling","text":"Gosling component rendering R shiny apps","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build gosling plot object — gosling","text":"","code":"if (interactive()) {   library(shiny)   library(shiny.gosling)    # Circular track 1 ----   circular_track1_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\",     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4   )    circular_track1_x <- visual_channel_x(field = \"start\", type = \"genomic\")   circular_track1_xe <- visual_channel_x(field = \"end\", type = \"genomic\")    circular_track1_y <- visual_channel_y(field = \"peak\", type = \"quantitative\")    circular_track1_row <- visual_channel_row(     field = \"sample\", type = \"nominal\"   )    circular_track1_color <- visual_channel_color(     field = \"sample\", type = \"nominal\"   )    circular_track1_tracks <- add_multi_tracks(     add_single_track(       mark = \"bar\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-1\"),       color = \"blue\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-2\"),       color = \"red\"     )   )    circular_track1_styles <- default_track_styles(     outlineWidth = 0   )    circular_track1 <- add_single_track(     id = \"circular_track1\", alignment = \"overlay\", data = circular_track1_data,     x = circular_track1_x, xe = circular_track1_xe,     y = circular_track1_y, row = circular_track1_row,     color = circular_track1_color,     stroke = \"black\", strokeWidth = 0.3,     tracks = circular_track1_tracks,     style = circular_track1_styles,     width = 500, height = 100   )    # Compose Circular track ----   circular_composed_view <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       circular_track1     ),     static = TRUE, layout = \"circular\", alignment = \"stack\"   )    # Arrange final view   circular_linear_view <- arrange_views(     arrangement = \"horizontal\",     views = list(circular_composed_view)   )       ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"circular_component\",         circular_linear_view, clean_braces = FALSE       )     })   }    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingDependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup gosling dependencies — goslingDependency","title":"Setup gosling dependencies — goslingDependency","text":"Setup gosling dependencies","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingDependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup gosling dependencies — goslingDependency","text":"","code":"goslingDependency()"},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingDependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup gosling dependencies — goslingDependency","text":"list dependencies Gosling","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"gosling output function — goslingOutput","title":"gosling output function — goslingOutput","text":"gosling output function shiny use. Must use function instead shiny output functions.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gosling output function — goslingOutput","text":"","code":"goslingOutput(outputId)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gosling output function — goslingOutput","text":"outputId ID output element","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gosling output function — goslingOutput","text":"reactOutput HTML UI render","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gosling output function — goslingOutput","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":null,"dir":"Reference","previous_headings":"","what":"is_atomic_field — is_atomic_field","title":"is_atomic_field — is_atomic_field","text":"is_atomic_field","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_atomic_field — is_atomic_field","text":"","code":"is_atomic_field(field_name)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_atomic_field — is_atomic_field","text":"field_name character number another atomic value.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_atomic_field — is_atomic_field","text":"List.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list — json_list","title":"Create list — json_list","text":"Create list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list — json_list","text":"","code":"json_list(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list — json_list","text":"... Items put list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create list — json_list","text":"list items","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create list — json_list","text":"","code":"if (interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove null from list — list_rm_null","title":"Remove null from list — list_rm_null","text":"Remove null list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove null from list — list_rm_null","text":"","code":"list_rm_null(r_list)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove null from list — list_rm_null","text":"r_list r list NULL values","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove null from list — list_rm_null","text":"r list without NULL values","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/print.gosling.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for the gosling component — print.gosling","title":"Print method for the gosling component — print.gosling","text":"Print method gosling component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/print.gosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for the gosling component — print.gosling","text":"","code":"# S3 method for gosling print(x, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/print.gosling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for the gosling component — print.gosling","text":"x gosling object ... arguments passed methods.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/print.gosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for the gosling component — print.gosling","text":"r list without NULL values","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":null,"dir":"Reference","previous_headings":"","what":"gosling render function — renderGosling","title":"gosling render function — renderGosling","text":"gosling render function shiny use","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gosling render function — renderGosling","text":"","code":"renderGosling(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gosling render function — renderGosling","text":"expr Expression returning HTML / 'React' render. env Environment evaluate expr. quoted expr quoted expression?","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gosling render function — renderGosling","text":"function can assigned output Shiny server function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gosling render function — renderGosling","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a shiny.gosling example — run_example","title":"Runs a shiny.gosling example — run_example","text":"Runs shiny.gosling example","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a shiny.gosling example — run_example","text":"","code":"run_example(example = NA)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a shiny.gosling example — run_example","text":"example character indicating valid example.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a shiny.gosling example — run_example","text":"Shiny App launched.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs a shiny.gosling example — run_example","text":"","code":"if (interactive()) {   run_example(\"circularLinearWithBrush\") }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data object builder — track_data","title":"Data object builder — track_data","text":"Build data object gosling plots","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data object builder — track_data","text":"","code":"track_data(   url = NULL,   type,   separator = NULL,   sampleLength = NULL,   headerNames = NULL,   genomicFields = NULL,   chromosomeField = NULL,   genomicFieldsToConvert = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data object builder — track_data","text":"url character. Specify URL address data file. type character. Type data. One \"csv\", \"json\", \"bigwig\", \"bam\", \"vcf\", \"vector\", \"multivec\" \"beddb\". usage refer http://gosling-lang.org/docs/data#supported-data-formats. separator character. Specify file separator, Default: ',' sampleLength number. Specify number rows loaded URL. Default: 1000 headerNames character vector. Specify names data fields CSV file header row. genomicFields character vector. Specify name genomic data fields. chromosomeField character. Specify name chromosome data fields. genomicFieldsToConvert Define genomic fields data list format. Experimental Property. object follows format \"chromosomeField\":\"string\",\"genomicFields\":\"string[]\" ( ) ... parameters passed json data object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data object builder — track_data","text":"list data specs","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data object builder — track_data","text":"info visit http://gosling-lang.org/docs/data. Check various supported data formats parameters. can constructed using function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data object builder — track_data","text":"","code":"if (interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(       list(         operation = \"less-than\",         measure = \"width\",         threshold = \"|xe-x|\",         transitionPadding = 30,         target = \"mark\"       ),       list(         operation = \"LT\",         measure = \"zoomLevel\",         threshold = 40,         target = \"track\"       )     )   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Data object builder for a csv file — track_data_csv","title":"Data object builder for a csv file — track_data_csv","text":"Build data object gosling plots","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data object builder for a csv file — track_data_csv","text":"","code":"track_data_csv(   file,   genomicFields = NULL,   chromosomeField = NULL,   separator = \",\",   sampleLength = 1000,   headerNames = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data object builder for a csv file — track_data_csv","text":"file character. Specify URL address local file name www directory data file. genomicFields character vector. Specify name genomic data fields. chromosomeField character. Specify name chromosome data fields. separator character. Specify file separator, Default: ',' sampleLength number. Specify number rows loaded URL. Default: 1000 headerNames character vector. Specify names data fields CSV file header row. ... parameters passed json data object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data object builder for a csv file — track_data_csv","text":"list data specs csv file","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data object builder for a csv file — track_data_csv","text":"","code":"if (interactive()) { library(shiny.gosling) library(shiny) library(GenomicRanges)  url <- \"https://rb.gy/7y3fx\" temp_file <- file.path(tempdir(), \"GSM1295076_CBX6_BF_ChipSeq_mergedReps_peaks.bed.gz\") download.file(url, destfile = temp_file) df <- read.delim(   temp_file,   header = FALSE,   comment.char = \"#\" ) gr <- GRanges(   seqnames = df$V1,   ranges = IRanges(df$V2, df$V3) )  if (!dir.exists(\"data\")) {   dir.create(\"data\") } utils::write.csv(gr, \"data/ChipSeqPeaks.csv\", row.names = FALSE)  ui <- fluidPage(   use_gosling(clear_files = FALSE),   goslingOutput(\"gosling_plot\") )  track_1 <- add_single_track(   width = 800,   height = 180,   data = track_data_csv(     \"data/ChipSeqPeaks.csv\", chromosomeField = \"seqnames\",     genomicFields = c(\"start\", \"end\")   ),   mark = \"bar\",   x = visual_channel_x(     field = \"start\", type = \"genomic\", axis = \"bottom\"   ),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   y = visual_channel_y(     field = \"width\", type = \"quantitative\", axis = \"right\"   ),   size = list(value = 5) )  composed_view <- compose_view(   layout = \"linear\",   tracks = track_1 )  arranged_view <- arrange_views(   title = \"Basic Marks: bar\",   subtitle = \"Tutorial Examples\",   views = composed_view )  server <- function(input, output, session) {   output$gosling_plot <- renderGosling({     gosling(       component_id = \"component_1\",       arranged_view     )   }) }  shiny::shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_gr.html","id":null,"dir":"Reference","previous_headings":"","what":"Data object builder for a GRanges object by locally saving it — track_data_gr","title":"Data object builder for a GRanges object by locally saving it — track_data_gr","text":"Build data object gosling plots","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_gr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data object builder for a GRanges object by locally saving it — track_data_gr","text":"","code":"track_data_gr(   granges,   chromosomeField = NULL,   genomicFields = NULL,   separator = \",\",   sampleLength = 1000,   headerNames = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_gr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data object builder for a GRanges object by locally saving it — track_data_gr","text":"granges GRanges object GenomicRanges package seqnames ranges chromosomeField character. Specify name chromosome data fields. genomicFields character vector. Specify name genomic data fields. separator character. Specify file separator, Default: ',' sampleLength number. Specify number rows loaded URL. Default: 1000 headerNames character vector. Specify names data fields CSV file header row. ... parameters passed json data object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_gr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data object builder for a GRanges object by locally saving it — track_data_gr","text":"list data specs csv file","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_gr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data object builder for a GRanges object by locally saving it — track_data_gr","text":"","code":"if (interactive()) { library(shiny.gosling) library(shiny) library(GenomicRanges)  url <- \"https://rb.gy/7y3fx\" temp_file <- file.path(tempdir(), \"GSM1295076_CBX6_BF_ChipSeq_mergedReps_peaks.bed.gz\") download.file(url, destfile = temp_file) df <- read.delim(   temp_file,   header = FALSE,   comment.char = \"#\" ) gr <- GRanges(   seqnames = df$V1,   ranges = IRanges(df$V2, df$V3) )  ui <- fluidPage(   use_gosling(clear_files = FALSE),   goslingOutput(\"gosling_plot\") )  track_1 <- add_single_track(   width = 800,   height = 180,   data = track_data_gr(     gr, chromosomeField = \"seqnames\",     genomicFields = c(\"start\", \"end\")   ),   mark = \"bar\",   x = visual_channel_x(     field = \"start\", type = \"genomic\", axis = \"bottom\"   ),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   y = visual_channel_y(     field = \"width\", type = \"quantitative\", axis = \"right\"   ),   size = list(value = 5) )  composed_view <- compose_view(   layout = \"linear\",   tracks = track_1 )  arranged_view <- arrange_views(   title = \"Basic Marks: bar\",   subtitle = \"Tutorial Examples\",   views = composed_view )  server <- function(input, output, session) {   output$gosling_plot <- renderGosling({     gosling(       component_id = \"component_1\",       arranged_view     )   }) }  shiny::shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Data transformer — track_data_transform","title":"Data transformer — track_data_transform","text":"data transformations","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data transformer — track_data_transform","text":"","code":"track_data_transform(type = NULL, field = NULL, oneOf = NULL, not = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data transformer — track_data_transform","text":"type character. One \"filter\", \"concat\", \"replace\", \"log\", \"displace\", \"exonSplit\", \"coverage\", \"genomicLength\", \"svType\" \"subjson\". Check usage details http://gosling-lang.org/docs/data/#data-transform. field character.  filter applied based values specified data field. oneOf vector characters numbers. Check whether value element provided list. Boolean. \"\": true, apply logical operation filter. Default: false. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data transformer — track_data_transform","text":"list data transformations specs","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data transformer — track_data_transform","text":"info visit http://gosling-lang.org/docs/data#data-transform multiple ways transform data. Check documentation details usage.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data transformer — track_data_transform","text":"","code":"if (interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(       list(         operation = \"less-than\",         measure = \"width\",         threshold = \"|xe-x|\",         transitionPadding = 30,         target = \"mark\"       ),       list(         operation = \"LT\",         measure = \"zoomLevel\",         threshold = 40,         target = \"track\"       )     )   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple data transforms — track_data_transforms","title":"Combine multiple data transforms — track_data_transforms","text":"Combine multiple data transforms","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple data transforms — track_data_transforms","text":"","code":"track_data_transforms(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple data transforms — track_data_transforms","text":"... Multiple data transform specs separated comma.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple data transforms — track_data_transforms","text":"list multiple data transform specs","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate gosling — use_gosling","title":"Initiate gosling — use_gosling","text":"Add function beginning ui. needed gosling work shiny plots.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate gosling — use_gosling","text":"","code":"use_gosling(clear_files = TRUE)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate gosling — use_gosling","text":"clear_files default FALSE. clear locally stored csv files created gosling .","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate gosling — use_gosling","text":"Gosling initiator HTML.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate gosling — use_gosling","text":"","code":"if (interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic visual channel builder — visual_channel","title":"Generic visual channel builder — visual_channel","text":"Generic visual channel builder","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic visual channel builder — visual_channel","text":"","code":"visual_channel(field = NULL, type = NULL, range = NULL, domain = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic visual channel builder — visual_channel","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic visual channel builder — visual_channel","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic visual channel builder — visual_channel","text":"info visit http://gosling-lang.org/docs/visual-channel#encode--visual-channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":null,"dir":"Reference","previous_headings":"","what":"color visual channel — visual_channel_color","title":"color visual channel — visual_channel_color","text":"color visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"color visual channel — visual_channel_color","text":"","code":"visual_channel_color(   field = NULL,   title = NULL,   type = NULL,   scaleOffset = NULL,   scale = NULL,   legend = NULL,   grid = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"color visual channel — visual_channel_color","text":"field character. Name data field. title character. Title legend. Default: undefined. type character. Must \"genomic\". Specify data type. scaleOffset number vector form c(1, 2). Whether use offset domain proportionally. bound brushes color legend. Default: c(0, 1). scale character. One \"linear\", \"log\". legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"color visual channel — visual_channel_color","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"color visual channel — visual_channel_color","text":"info visit http://gosling-lang.org/docs/visual-channel#color","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"color visual channel — visual_channel_color","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":null,"dir":"Reference","previous_headings":"","what":"opacity visual channel — visual_channel_opacity","title":"opacity visual channel — visual_channel_opacity","text":"opacity visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"opacity visual channel — visual_channel_opacity","text":"","code":"visual_channel_opacity(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"opacity visual channel — visual_channel_opacity","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"opacity visual channel — visual_channel_opacity","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"opacity visual channel — visual_channel_opacity","text":"info visit http://gosling-lang.org/docs/visual-channel#opacity","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":null,"dir":"Reference","previous_headings":"","what":"row visual channel — visual_channel_row","title":"row visual channel — visual_channel_row","text":"row visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"row visual channel — visual_channel_row","text":"","code":"visual_channel_row(   field = NULL,   type = NULL,   padding = NULL,   legend = NULL,   grid = NULL,   clip = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"row visual channel — visual_channel_row","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. padding number. Determines size inner white spaces top bottom individual rows. Default: 0. legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. clip Boolean. Clip row actual y value exceeds max value y scale. Used bar marks moment. Default: TRUE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"row visual channel — visual_channel_row","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"row visual channel — visual_channel_row","text":"info visit http://gosling-lang.org/docs/visual-channel#row","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"row visual channel — visual_channel_row","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # Circular track 1 ----   circular_track1_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\",     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4   )    circular_track1_x <- visual_channel_x(field = \"start\", type = \"genomic\")   circular_track1_xe <- visual_channel_x(field = \"end\", type = \"genomic\")    circular_track1_y <- visual_channel_y(field = \"peak\", type = \"quantitative\")    circular_track1_row <- visual_channel_row(     field = \"sample\", type = \"nominal\"   )    circular_track1_color <- visual_channel_color(     field = \"sample\", type = \"nominal\"   )    circular_track1_tracks <- add_multi_tracks(     add_single_track(       mark = \"bar\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-1\"),       color = \"blue\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-2\"),       color = \"red\"     )   )    circular_track1_styles <- default_track_styles(     outlineWidth = 0   )    circular_track1 <- add_single_track(     id = \"circular_track1\", alignment = \"overlay\", data = circular_track1_data,     x = circular_track1_x, xe = circular_track1_xe,     y = circular_track1_y, row = circular_track1_row,     color = circular_track1_color,     stroke =  \"black\", strokeWidth = 0.3,     tracks = circular_track1_tracks,     style = circular_track1_styles,     width = 500, height = 100   )    # Compose Circular track ----   circular_composed_view <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       circular_track1     ),     static = TRUE, layout = \"circular\", alignment = \"stack\"   )    # Arrange final view   circular_linear_view <- arrange_views(     arrangement = \"horizontal\",     views = list(circular_composed_view)   )       ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"circular_component\",         circular_linear_view, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":null,"dir":"Reference","previous_headings":"","what":"size visual channel — visual_channel_size","title":"size visual channel — visual_channel_size","text":"size visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"size visual channel — visual_channel_size","text":"","code":"visual_channel_size(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"size visual channel — visual_channel_size","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. Range specified like range = c(min_size, max_size) domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"size visual channel — visual_channel_size","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"size visual channel — visual_channel_size","text":"info visit http://gosling-lang.org/docs/visual-channel#size","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":null,"dir":"Reference","previous_headings":"","what":"stroke visual channel — visual_channel_stroke","title":"stroke visual channel — visual_channel_stroke","text":"stroke visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stroke visual channel — visual_channel_stroke","text":"","code":"visual_channel_stroke(   field = NULL,   title = NULL,   type = NULL,   scaleOffset = NULL,   legend = NULL,   grid = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stroke visual channel — visual_channel_stroke","text":"field character. Name data field. title character. Title legend. Default: undefined. type character. Must \"genomic\". Specify data type. scaleOffset number vector form c(1, 2). Whether use offset domain proportionally. bound brushes color legend. Default: c(0, 1). legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stroke visual channel — visual_channel_stroke","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stroke visual channel — visual_channel_stroke","text":"info visit http://gosling-lang.org/docs/visual-channel#stroke","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"stroke visual channel — visual_channel_stroke","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"deletion\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":null,"dir":"Reference","previous_headings":"","what":"stroke width visual channel — visual_channel_stroke_width","title":"stroke width visual channel — visual_channel_stroke_width","text":"stroke width visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stroke width visual channel — visual_channel_stroke_width","text":"","code":"visual_channel_stroke_width(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stroke width visual channel — visual_channel_stroke_width","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stroke width visual channel — visual_channel_stroke_width","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stroke width visual channel — visual_channel_stroke_width","text":"info visit http://gosling-lang.org/docs/visual-channel#strokewidth","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":null,"dir":"Reference","previous_headings":"","what":"text visual channel — visual_channel_text","title":"text visual channel — visual_channel_text","text":"text visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"text visual channel — visual_channel_text","text":"","code":"visual_channel_text(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"text visual channel — visual_channel_text","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"text visual channel — visual_channel_text","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"text visual channel — visual_channel_text","text":"info visit http://gosling-lang.org/docs/visual-channel#text","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"text visual channel — visual_channel_text","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"tooltip visual channel — visual_channel_tooltip","title":"tooltip visual channel — visual_channel_tooltip","text":"tooltip visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tooltip visual channel — visual_channel_tooltip","text":"","code":"visual_channel_tooltip(field = NULL, type = NULL, alt = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tooltip visual channel — visual_channel_tooltip","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. alt character. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tooltip visual channel — visual_channel_tooltip","text":"List object. list object tooltip list object","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tooltip visual channel — visual_channel_tooltip","text":"info visit https://gosling.js.org/ check tooltip implementation","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tooltip visual channel — visual_channel_tooltip","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine tooltips into a list — visual_channel_tooltips","title":"Combine tooltips into a list — visual_channel_tooltips","text":"Combine tooltips list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine tooltips into a list — visual_channel_tooltips","text":"","code":"visual_channel_tooltips(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine tooltips into a list — visual_channel_tooltips","text":"... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine tooltips into a list — visual_channel_tooltips","text":"List object. json list tooltips combined single spec","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine tooltips into a list — visual_channel_tooltips","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":null,"dir":"Reference","previous_headings":"","what":"x and xe axis visual channel — visual_channel_x","title":"x and xe axis visual channel — visual_channel_x","text":"x xe axis visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"x and xe axis visual channel — visual_channel_x","text":"","code":"visual_channel_x(   field = NULL,   type = NULL,   legend = NULL,   grid = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"x and xe axis visual channel — visual_channel_x","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"x and xe axis visual channel — visual_channel_x","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"x and xe axis visual channel — visual_channel_x","text":"info visit http://gosling-lang.org/docs/visual-channel#x--xe","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"x and xe axis visual channel — visual_channel_x","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":null,"dir":"Reference","previous_headings":"","what":"y and ye axis visual channel — visual_channel_y","title":"y and ye axis visual channel — visual_channel_y","text":"y ye axis visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"y and ye axis visual channel — visual_channel_y","text":"","code":"visual_channel_y(   field = NULL,   zeroBaseline = NULL,   type = NULL,   legend = NULL,   grid = NULL,   flip = NULL,   baseline = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"y and ye axis visual channel — visual_channel_y","text":"field character. Name data field. zeroBaseline Boolean. Specify whether use zero baseline. Default: TRUE. type character. Must \"genomic\". Specify data type. legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. flip Boolean. Whether flip y-axis. done inverting range property. Default: FALSE. baseline character number. Custom baseline y-axis. Default: 0. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"y and ye axis visual channel — visual_channel_y","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"y and ye axis visual channel — visual_channel_y","text":"info visit http://gosling-lang.org/docs/visual-channel#y--ye","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"y and ye axis visual channel — visual_channel_y","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # Circular track 1 ----   circular_track1_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\",     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4   )    circular_track1_x <- visual_channel_x(field = \"start\", type = \"genomic\")   circular_track1_xe <- visual_channel_x(field = \"end\", type = \"genomic\")    circular_track1_y <- visual_channel_y(field = \"peak\", type = \"quantitative\")    circular_track1_row <- visual_channel_row(     field = \"sample\", type = \"nominal\"   )    circular_track1_color <- visual_channel_color(     field = \"sample\", type = \"nominal\"   )    circular_track1_tracks <- add_multi_tracks(     add_single_track(       mark = \"bar\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-1\"),       color = \"blue\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-2\"),       color = \"red\"     )   )    circular_track1_styles <- default_track_styles(     outlineWidth = 0   )    circular_track1 <- add_single_track(     id = \"circular_track1\", alignment = \"overlay\", data = circular_track1_data,     x = circular_track1_x, xe = circular_track1_xe,     y = circular_track1_y, row = circular_track1_row,     color = circular_track1_color,     stroke =  \"black\", strokeWidth = 0.3,     tracks = circular_track1_tracks,     style = circular_track1_styles,     width = 500, height = 100   )    # Compose Circular track ----   circular_composed_view <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       circular_track1     ),     static = TRUE, layout = \"circular\", alignment = \"stack\"   )    # Arrange final view   circular_linear_view <- arrange_views(     arrangement = \"horizontal\",     views = list(circular_composed_view)   )       ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"circular_component\",         circular_linear_view, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom to — zoom_to","title":"Zoom to — zoom_to","text":"Zooms  specific genomic position animated transition.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom to — zoom_to","text":"","code":"zoom_to(   component_id,   view_id,   position,   padding = 0,   duration = 1000,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom to — zoom_to","text":"component_id character. id component_id prop passed GoslingComponent function. view_id character. ID view want control. ID consistent specify track.id spec. position character. genomic position view navigated . can either specify chromosome (e.g., chr1) chromosome range pair (e.g., chr1:1-10000). padding numeric.  determines padding around specified position. unit number base pair (Default: 0). duration numeric. duration animated transition ms (Default: 1000). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zoom to — zoom_to","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zoom to — zoom_to","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    chromosome_options <- c(     \"Chr 1\" = \"chr1\",     \"Chr 2\" = \"chr2\",     \"Chr X\" = \"chrX\",     \"Chr Y\" = \"chrY\"   )    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"zoom_out\",           \"Zoom To\"         )       ),       column(         2,         selectInput(           \"chromosomes\",           \"Chromosome\",           selected = \"chr1\",           choices = chromosome_options         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$zoom_out, {       zoom_to(         component_id = \"component_1\",         view_id = \"track1\",         position = input$chromosomes       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom to extent — zoom_to_extent","title":"Zoom to extent — zoom_to_extent","text":"Zooms see entire view_id passed function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom to extent — zoom_to_extent","text":"","code":"zoom_to_extent(   component_id,   view_id,   duration = 1000,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom to extent — zoom_to_extent","text":"component_id character. id component_id prop passed GoslingComponent function. view_id character. ID view want control. ID consistent specify track.id spec. duration numeric. duration animated transition ms (Default: 1000). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zoom to extent — zoom_to_extent","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zoom to extent — zoom_to_extent","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"zoom_out\",           \"Zoom Out\"         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$zoom_out, {       zoom_to_extent(         component_id = \"component_1\",         view_id = \"track1\"       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/news/index.html","id":"shinygosling-0990","dir":"Changelog","previous_headings":"","what":"shiny.gosling 0.99.0","title":"shiny.gosling 0.99.0","text":"Added NEWS.md file track changes package.","code":""}]
