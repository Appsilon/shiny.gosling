[{"path":"https://appsilon.github.io/shiny.gosling/articles/intro.html","id":"section-introduction-to-shiny-gosling","dir":"Articles","previous_headings":"","what":"Introduction to shiny.gosling","title":"Introduction to shiny.gosling","text":"package R shiny implementation Gosling.js library. Gosling js highly expressive library based Grammar scalable interactive Genomics Data visualization. library build upon React wrapper Gosling.js. powered Shiny.React. Thus Charts can directly build using package. Let’s start example. let’s read csv file Genomic data chromosome start stop indicators. dataset directly picked github . can read dataset going website . short GEMINI (Genome MINIng) flexible framework exploring genetic variation context wealth genome annotations available human genome. shiny.gosling can basically create tracks data create view tracks. understand build plot let’s understand 3 basic principles gosling.js Track contains data, layout, height, width aesthetics etc… One Track combine together create View One views combine together create Plot. plot created Gosling. Let’s visit one one. Let’s start creating track. Let’s define first track add properties track. shiny.gosling can specific colors ranges channel. Let’s build layers plot. can build multiple tracks represent genome. add_single_track function constructs single track inputs. now let’s create final view can even add tracks . let’s create tracks just make better beautiful graph.","code":"gemini_github_path <- \"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv\" # nolint  cancer_data <- \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/cnv.PD35930a.csv\"  cancer_rearranged_data <- \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/cnv.PD35930a.csv\"  cistrome_data <- \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\" single_track <- add_single_track(   id = \"track1\",   data = track_data(     url = cistrome_data,     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4,   ),   mark = \"rect\",   x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),   xe = visual_channel_x(field = \"end\", type = \"genomic\"),   row = visual_channel_row(     field = \"sample\",     type = \"nominal\",     legend = TRUE   ),   color = visual_channel_color(     field = \"peak\",     type = \"quantitative\",     legend = TRUE   ),   tooltip = visual_channel_tooltips(     visual_channel_tooltip(field = \"start\", type = \"genomic\", alt = \"Start Position\"),     visual_channel_tooltip(field = \"end\", type = \"genomic\", alt = \"End Position\"),     visual_channel_tooltip(       field = \"peak\",       type = \"quantitative\",       alt = \"Value\",       format = \"0.2\"     )   ),   width = 600,   height = 130 ) single_composed_track <- compose_view(   tracks = single_track ) single_composed_views <- arrange_views(       title = \"Single Track\",       subtitle = \"This is the simplest single track visualization with a linear layout\",       layout = \"circular\",       views = single_composed_track,       xDomain = list(         chromosome = \"chr1\",         interval = c(1, 3000500)       )     ) session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.3 (2023-03-15) #>  os       Ubuntu 22.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2023-04-20 #>  pandoc   2.19.2 @ /usr/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package       * version date (UTC) lib source #>  bslib           0.4.2   2022-12-16 [1] RSPM #>  cachem          1.0.7   2023-02-24 [1] RSPM #>  cli             3.6.1   2023-03-23 [1] RSPM #>  desc            1.4.2   2022-09-08 [1] RSPM #>  digest          0.6.31  2022-12-11 [1] RSPM #>  ellipsis        0.3.2   2021-04-29 [1] RSPM #>  evaluate        0.20    2023-01-17 [1] RSPM #>  fastmap         1.1.1   2023-02-24 [1] RSPM #>  fs              1.6.1   2023-02-06 [1] RSPM #>  glue            1.6.2   2022-02-24 [1] RSPM #>  htmltools       0.5.5   2023-03-23 [1] RSPM #>  httpuv          1.6.9   2023-02-14 [1] RSPM #>  jquerylib       0.1.4   2021-04-26 [1] RSPM #>  jsonlite        1.8.4   2022-12-06 [1] RSPM #>  knitr           1.42    2023-01-25 [1] RSPM #>  later           1.3.0   2021-08-18 [1] RSPM #>  lifecycle       1.0.3   2022-10-07 [1] RSPM #>  magrittr        2.0.3   2022-03-30 [1] RSPM #>  memoise         2.0.1   2021-11-26 [1] RSPM #>  mime            0.12    2021-09-28 [1] RSPM #>  pkgdown         2.0.7   2022-12-14 [1] any (@2.0.7) #>  promises        1.2.0.1 2021-02-11 [1] RSPM #>  purrr           1.0.1   2023-01-10 [1] RSPM #>  R6              2.5.1   2021-08-19 [1] RSPM #>  ragg            1.2.5   2023-01-12 [1] RSPM #>  Rcpp            1.0.10  2023-01-22 [1] RSPM #>  rlang           1.1.0   2023-03-14 [1] RSPM #>  rmarkdown       2.21    2023-03-26 [1] RSPM #>  rprojroot       2.0.3   2022-04-02 [1] RSPM #>  sass            0.4.5   2023-01-24 [1] RSPM #>  sessioninfo   * 1.2.2   2021-12-06 [1] RSPM #>  shiny         * 1.7.4   2022-12-15 [1] RSPM #>  shiny.gosling * 0.99.1  2023-04-20 [1] local #>  shiny.react     0.3.0   2022-12-25 [1] RSPM #>  stringi         1.7.12  2023-01-11 [1] RSPM #>  stringr         1.5.0   2022-12-02 [1] RSPM #>  systemfonts     1.0.4   2022-02-11 [1] RSPM #>  textshaping     0.3.6   2021-10-13 [1] RSPM #>  vctrs           0.6.1   2023-03-22 [1] RSPM #>  xfun            0.38    2023-03-24 [1] RSPM #>  xtable          1.8-4   2019-04-21 [1] RSPM #>  yaml            2.3.7   2023-01-23 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.2.3/lib/R/site-library #>  [3] /opt/R/4.2.3/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://appsilon.github.io/shiny.gosling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Appsilon. Author, maintainer. Anirban Shaw. Author. Federico Rivadeneira. Author.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Appsilon, Shaw , Rivadeneira F (2023). shiny.gosling: Grammar-based Toolkit Scalable Interactive Genomics Data Visualization R Shiny. R package version 0.99.1.","code":"@Manual{,   title = {shiny.gosling: A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny},   author = {{Appsilon} and Anirban Shaw and Federico Rivadeneira},   year = {2023},   note = {R package version 0.99.1}, }"},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"shinygosling-","dir":"","previous_headings":"","what":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"R Shiny wrapper Gosling.js - Grammar-based Toolkit Scalable Interactive Genomics Data Visualization Based gosling.js powered shiny.react.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"install packages, run: Take look basic example app start working shiny.gosling. learn Gosling language, follow Gosling docs.","code":"remotes::install_github(\"Appsilon/shiny.react\") remotes::install_github(\"Appsilon/shiny.gosling\")"},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Use run_example function order see working examples: example run multiTrackApp example: preview ’s :","code":"run_example(\"multiTrackApp\")"},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"simple-single-track-shiny-app","dir":"","previous_headings":"Examples","what":"Simple Single Track Shiny App","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Simple Single Track Shiny App","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"interactive-circular-plot-with-linear-brush","dir":"","previous_headings":"Examples","what":"Interactive Circular Plot with Linear Brush","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Circular Plot Linear Brush","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"sars-cov-2-example","dir":"","previous_headings":"Examples","what":"SARS CoV 2 Example","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"SARS CoV 2 Example","code":""},{"path":"https://appsilon.github.io/shiny.gosling/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Explore Rhinoverse - family R packages built around Rhino!","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Gosling component — GoslingComponent","title":"Create Gosling component — GoslingComponent","text":"Create Gosling component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Gosling component — GoslingComponent","text":"","code":"GoslingComponent(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Gosling component — GoslingComponent","text":"... Name component.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/GoslingComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Gosling component — GoslingComponent","text":"function create gosling component.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual marks — add_mark","title":"Visual marks — add_mark","text":"Visual marks (e.g., points, lines, bars) basic graphical elements visualization.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual marks — add_mark","text":"","code":"add_mark(   x = NULL,   xe = NULL,   x1 = NULL,   x1e = NULL,   y = NULL,   strokeWidth = NULL,   opacity = NULL,   row = NULL,   size = NULL,   color = NULL,   stroke = NULL )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual marks — add_mark","text":"x object returned visual_channel_x(). xe object returned visual_channel_x(). x1 object returned visual_channel_x(). x1e object returned visual_channel_x(). y object returned visual_channel_y(). strokeWidth number object returned visual_channel_stroke_width(). opacity number object returned visual_channel_opacity(). row factor data column Channel row used channel y stratify visualization categorical values. size number object returned visual_channel_size(). color character object returned visual_channel_color(). stroke number object returned visual_channel_stroke().","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual marks — add_mark","text":"list mark specifications","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visual marks — add_mark","text":"info visit http://gosling-lang.org/docs/mark","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine single tracks. — add_multi_tracks","title":"Combine single tracks. — add_multi_tracks","text":"Combine single tracks.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine single tracks. — add_multi_tracks","text":"","code":"add_multi_tracks(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine single tracks. — add_multi_tracks","text":"... Multiple tracks add_single_track() function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine single tracks. — add_multi_tracks","text":"json list.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_multi_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine single tracks. — add_multi_tracks","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a single track — add_single_track","title":"Add a single track — add_single_track","text":"Add single track plot mark type ( plot type ). function constructs single track inputs. inputs can id, data, mark etc. Please check gosling.js documentation usage.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a single track — add_single_track","text":"","code":"add_single_track(   id = NULL,   data = NULL,   mark = NULL,   assembly = NULL,   row = NULL,   size = NULL,   color = NULL,   strokeWidth = NULL,   opacity = NULL,   x = NULL,   xe = NULL,   x1 = NULL,   x1e = NULL,   y = NULL,   stroke = NULL,   width = NULL,   height = NULL,   dataTransform = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a single track — add_single_track","text":"id Optional argument assign id track. data object track_data() function. mark Type plot. One c(\"point\", \"line\", \"rect\", \"bar\", \"area\", \"link\", \"triangle\", \"text\"). mark type supported visual channel. Different marks support different visual channels: point: x, y, row, size, color, strokeWidth, opacity line: x, y, row, color, strokeWidth rect: x, xe, row, color, strokeWidth, opacity bar: x, y, row, color, strokeWidth, opacity area: x, y, row, color, strokeWidth link: x, xe, x1, x1e, color, opacity triangle: x, xe, row, size, color, opacity text: x, xe, row, color, opacity info visit http://gosling-lang.org/tutorials/ assembly Currently support \"hg38\", \"hg19\", \"hg18\", \"hg17\", \"hg16\", \"mm10\", \"mm9\". Defaults \"hg38\". row object visual_channel_row(). size object visual_channel_size() atomic number. color object visual_channel_color() atomic character hex code form \"#123456\". strokeWidth object visual_channel_stroke_width() atomic number. opacity object visual_channel_opacity() atomic ratio 0 1. x object visual_channel_x() atomic value. xe object visual_channel_x() atomic value. x1 object visual_channel_x() atomic value. x1e object visual_channel_x() atomic value. y object visual_channel_y() atomic value. stroke object visual_channel_stroke() function character hex color code like \"#123456\". width number interpreted units pixel. height number interpreted units pixel. dataTransform object track_data_transform() function. ... arguments passed onto gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a single track — add_single_track","text":"list object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/add_single_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a single track — add_single_track","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_png\",           \"PNG\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_png, {       export_png(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange views — arrange_views","title":"Arrange views — arrange_views","text":"Arrange views compose_view() function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange views — arrange_views","text":"","code":"arrange_views(layout = NULL, views = NULL, listify = TRUE, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange views — arrange_views","text":"layout One \"linear\" \"circular\". views object compose_view() function. listify Boolean. Convert views list.. ... options passed gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange views — arrange_views","text":"list object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/arrange_views.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange views — arrange_views","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"atomic_values_to_list — atomic_values_to_list","title":"atomic_values_to_list — atomic_values_to_list","text":"atomic_values_to_list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"atomic_values_to_list — atomic_values_to_list","text":"","code":"atomic_values_to_list(property_list)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"atomic_values_to_list — atomic_values_to_list","text":"property_list character number another atomic value.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/atomic_values_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"atomic_values_to_list — atomic_values_to_list","text":"List.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"style of the brush mark — brush_styles","title":"style of the brush mark — brush_styles","text":"Customize style brush mark rangeSelect mouse event.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"style of the brush mark — brush_styles","text":"","code":"brush_styles(   strokeWidth = NULL,   strokeOpacity = NULL,   stroke = NULL,   opacity = NULL,   color = NULL )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"style of the brush mark — brush_styles","text":"strokeWidth number. stroke width marks mouse events triggered. strokeOpacity number. stroke character. Stroke color marks mouse events triggered. opacity number. Opacity marks mouse events triggered. color character. Color marks mouse events triggered.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"style of the brush mark — brush_styles","text":"List object brush styles.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/brush_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"style of the brush mark — brush_styles","text":"info visit http://gosling-lang.org/docs/visual-channel/#type-brush","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Build gosling spec from R list — build_json","title":"Build gosling spec from R list — build_json","text":"Build gosling spec R list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build gosling spec from R list — build_json","text":"","code":"build_json(r_list, clean_braces = TRUE, pretty = TRUE, auto_unbox = TRUE)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build gosling spec from R list — build_json","text":"r_list R list object built gosling functions clean_braces Whether remove extra square brackets json string. pretty Whether get json indentation, line breaks etc. auto_unbox TRUE automatically unbox() atomic vectors length 1.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/build_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build gosling spec from R list — build_json","text":"json spec gosling output","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":null,"dir":"Reference","previous_headings":"","what":"Create react component — component","title":"Create react component — component","text":"Create react component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create react component — component","text":"","code":"component(name)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create react component — component","text":"name name react component","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create react component — component","text":"function create react element","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose views — compose_view","title":"Compose views — compose_view","text":"Compose views add_single_track() add_multi_tracks() functions.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose views — compose_view","text":"","code":"compose_view(   multi = FALSE,   layout = NULL,   width = NULL,   height = NULL,   centerRadius = NULL,   tracks,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose views — compose_view","text":"multi Whether multiple tracks view. layout One \"linear\" \"circular\". width number interpreted units pixel. height number interpreted units pixel. centerRadius Specify proportion radius center white space. number c(0,1), default=0.3 tracks tracks add_multi_tracks() function. ... arguments passed along view gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose views — compose_view","text":"list object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/compose_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose views — compose_view","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Default styles for tracks — default_track_styles","title":"Default styles for tracks — default_track_styles","text":"Default styles tracks","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default styles for tracks — default_track_styles","text":"","code":"default_track_styles(   textStrokeWidth = NULL,   textStroke = NULL,   textFontWeight = NULL,   textFontSize = NULL,   textAnchor = NULL,   select = NULL,   outlineWidth = NULL,   outline = NULL,   mouseOver = NULL,   matrixExtent = NULL,   linkStyle = NULL,   linkMinHeight = NULL,   linkConnectionType = NULL,   linePattern = NULL,   legendTitle = NULL,   inlineLegend = NULL,   enableSmoothPath = NULL,   dy = NULL,   dx = NULL,   dashed = NULL,   curve = NULL,   brush = NULL,   backgroundOpacity = NULL,   background = NULL,   align = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default styles for tracks — default_track_styles","text":"textStrokeWidth number. Specify stroke width text marks. Can also specified using strokeWidth channel option text marks. textStroke character. Specify stroke text marks. Can also specified using stroke channel option text marks. textFontWeight character. One \"bold\", \"normal\". Specify font weight text marks. textFontSize number. Specify font size text marks. Can also specified using size channel option text marks. textAnchor character. One \"start\", \"middle\", \"end\". Specify alignment text marks given point. select object returned event_styles(). Customize visual effects rangeSelect events marks. outlineWidth number. outline character. mouseOver object returned event_styles(). Customize visual effects mouseOver events marks. matrixExtent character.One \"full\", \"upper-right\", \"lower-left\". Determine show one side diagonal HiGlass matrix. Default: \"full\". linkStyle character. One \"elliptical\", \"circular\", \"straight\", \"experimentalEdgeBundling\". style withinLink betweenLink marks. Default: 'circular' 'elliptical' used default option. linkMinHeight number. minimum height withinLink betweenLink marks. Unit percentage Default: 0.5. linkConnectionType character. One \"straight\", \"curve\", \"corner\". Specify connection type betweenLink marks. Default: \"corner\". linePattern list form list(size=\"number\",type=\"string\"). One \"triangleLeft\", \"triangleRight\".) Specify pattern dashes gaps rule marks. legendTitle character. defined, show legend title top left. inlineLegend Boolean. Specify whether show legend single horizontal line? enableSmoothPath Boolean. Whether enable smooth paths drawing curves. Default: FALSE. dy number. Offset position marks y direction. property currently supported text marks. dx number. Offset position marks x direction. property currently supported text marks. dashed vector number like c(1, 2). Specify pattern dashes gaps rule marks. curve character. One \"top\", \"bottom\", \"left\", \"right\". Specify curve rule marks. brush object returned brush_styles(). Customize style brush mark rangeSelect mouse event. backgroundOpacity number. background character. align character. One \"left\", \"right\". Specify alignment marks. property currently supported triangle marks. ... styles passed gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default styles for tracks — default_track_styles","text":"List object default styles.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default styles for tracks — default_track_styles","text":"info visit http://gosling-lang.org/docs/visual-channel/#style-related-properties","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/default_track_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default styles for tracks — default_track_styles","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Mouse event styles — event_styles","title":"Mouse event styles — event_styles","text":"styles defined applied targets mouse events, point mark user click mouse.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mouse event styles — event_styles","text":"","code":"event_styles(   strokeWidth = NULL,   strokeOpacity = NULL,   stroke = NULL,   opacity = NULL,   color = NULL,   arrange = NULL )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mouse event styles — event_styles","text":"strokeWidth number. stroke width marks mouse events triggered. strokeOpacity number. stroke character. Stroke color marks mouse events triggered. opacity number. Opacity marks mouse events triggered. color character. Color marks mouse events triggered. arrange character. One \"behind\", \"front\". Show event effects behind front marks.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mouse event styles — event_styles","text":"List object event styles.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/event_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mouse event styles — event_styles","text":"info visit http://gosling-lang.org/docs/visual-channel/#type-eventstyle","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Export PDF — export_pdf","title":"Export PDF — export_pdf","text":"Exports PDF","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export PDF — export_pdf","text":"","code":"export_pdf(   component_id,   transparent_background = FALSE,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export PDF — export_pdf","text":"component_id character. id component_id prop passed GoslingComponent function. transparent_background Boolean. Determine background transparent (Default: false). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export PDF — export_pdf","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export PDF — export_pdf","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Export PNG — export_png","title":"Export PNG — export_png","text":"Exports PNG","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export PNG — export_png","text":"","code":"export_png(   component_id,   transparent_background = FALSE,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export PNG — export_png","text":"component_id character. id component_id prop passed GoslingComponent function. transparent_background Boolean. Determine background transparent (Default: false). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export PNG — export_png","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/export_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export PNG — export_png","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_png\",           \"PNG\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_png, {       export_png(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":null,"dir":"Reference","previous_headings":"","what":"Build gosling plot object — gosling","title":"Build gosling plot object — gosling","text":"Build gosling plot object","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build gosling plot object — gosling","text":"","code":"gosling(component_id, composed_views, clean_braces = TRUE)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build gosling plot object — gosling","text":"component_id Assign component id use api like zoom. composed_views views composed arrange_views. clean_braces Whether remove extra square brackets json string.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build gosling plot object — gosling","text":"Gosling component rendering R shiny apps","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/gosling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build gosling plot object — gosling","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # Circular track 1 ----   circular_track1_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\",     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4   )    circular_track1_x <- visual_channel_x(field = \"start\", type = \"genomic\")   circular_track1_xe <- visual_channel_x(field = \"end\", type = \"genomic\")    circular_track1_y <- visual_channel_y(field = \"peak\", type = \"quantitative\")    circular_track1_row <- visual_channel_row(     field = \"sample\", type = \"nominal\"   )    circular_track1_color <- visual_channel_color(     field = \"sample\", type = \"nominal\"   )    circular_track1_tracks <- add_multi_tracks(     add_single_track(       mark = \"bar\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-1\"),       color = \"blue\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-2\"),       color = \"red\"     )   )    circular_track1_styles <- default_track_styles(     outlineWidth = 0   )    circular_track1 <- add_single_track(     id = \"circular_track1\", alignment = \"overlay\", data = circular_track1_data,     x = circular_track1_x, xe = circular_track1_xe,     y = circular_track1_y, row = circular_track1_row,     color = circular_track1_color,     stroke =  \"black\", strokeWidth = 0.3,     tracks = circular_track1_tracks,     style = circular_track1_styles,     width = 500, height = 100   )    # Compose Circular track ----   circular_composed_view <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       circular_track1     ),     static = TRUE, layout = \"circular\", alignment = \"stack\"   )    # Arrange final view   circular_linear_view <- arrange_views(     arrangement = \"horizontal\",     views = list(circular_composed_view)   )       ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"circular_component\",         circular_linear_view, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingDependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup gosling dependencies — goslingDependency","title":"Setup gosling dependencies — goslingDependency","text":"Setup gosling dependencies","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingDependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup gosling dependencies — goslingDependency","text":"","code":"goslingDependency()"},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingDependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup gosling dependencies — goslingDependency","text":"list dependencies Gosling","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"gosling output function — goslingOutput","title":"gosling output function — goslingOutput","text":"gosling output function shiny use. Must use function instead shiny output functions.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gosling output function — goslingOutput","text":"","code":"goslingOutput(outputId)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gosling output function — goslingOutput","text":"outputId ID output element","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gosling output function — goslingOutput","text":"reactOutput HTML UI render","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/goslingOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gosling output function — goslingOutput","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":null,"dir":"Reference","previous_headings":"","what":"is_atomic_field — is_atomic_field","title":"is_atomic_field — is_atomic_field","text":"is_atomic_field","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is_atomic_field — is_atomic_field","text":"","code":"is_atomic_field(field_name)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is_atomic_field — is_atomic_field","text":"field_name character number another atomic value.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/is_atomic_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is_atomic_field — is_atomic_field","text":"List.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list — json_list","title":"Create list — json_list","text":"Create list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list — json_list","text":"","code":"json_list(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list — json_list","text":"... Items put list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create list — json_list","text":"list items","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/json_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create list — json_list","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove null from list — list_rm_null","title":"Remove null from list — list_rm_null","text":"Remove null list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove null from list — list_rm_null","text":"","code":"list_rm_null(r_list)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove null from list — list_rm_null","text":"r_list r list NULL values","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/list_rm_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove null from list — list_rm_null","text":"r list without NULL values","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":null,"dir":"Reference","previous_headings":"","what":"gosling render function — renderGosling","title":"gosling render function — renderGosling","text":"gosling render function shiny use","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gosling render function — renderGosling","text":"","code":"renderGosling(expr)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gosling render function — renderGosling","text":"expr code rendering gosling plot. Must gosling object built shiny.gosling::gosling()","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gosling render function — renderGosling","text":"function can assigned output Shiny server function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/renderGosling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gosling render function — renderGosling","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a shiny.gosling example — run_example","title":"Runs a shiny.gosling example — run_example","text":"Runs shiny.gosling example","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a shiny.gosling example — run_example","text":"","code":"run_example(example)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a shiny.gosling example — run_example","text":"example character indicating valid example.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a shiny.gosling example — run_example","text":"Shiny App launched.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/run_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs a shiny.gosling example — run_example","text":"","code":"if(interactive()) {   run_example(\"circularLinearWithBrush\") }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data object builder — track_data","title":"Data object builder — track_data","text":"Build data object gosling plots","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data object builder — track_data","text":"","code":"track_data(   url,   type,   separator = NULL,   sampleLength = NULL,   headerNames = NULL,   genomicFields = NULL,   chromosomeField = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data object builder — track_data","text":"url character. Specify URL address data file. type character. Type data. One \"csv\", \"json\", \"bigwig\", \"bam\", \"vcf\", \"vector\", \"multivec\" \"beddb\". usage refer http://gosling-lang.org/docs/data#supported-data-formats. separator character. Specify file separator, Default: ',' sampleLength number. Specify number rows loaded URL. Default: 1000 headerNames character vector. Specify names data fields CSV file header row. genomicFields character vector. Specify name genomic data fields. chromosomeField character. Specify name chromosome data fields. ... parameters passed json data object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data object builder — track_data","text":"list data specs","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data object builder — track_data","text":"info visit http://gosling-lang.org/docs/data. Check various supported data formats parameters. can constructed using function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data object builder — track_data","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Data transformer — track_data_transform","title":"Data transformer — track_data_transform","text":"data transformations","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data transformer — track_data_transform","text":"","code":"track_data_transform(type = NULL, field = NULL, oneOf = NULL, not = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data transformer — track_data_transform","text":"type character. One \"filter\", \"concat\", \"replace\", \"log\", \"displace\", \"exonSplit\", \"coverage\", \"genomicLength\", \"svType\" \"subjson\". Check usage details http://gosling-lang.org/docs/data/#data-transform. field character.  filter applied based values specified data field. oneOf vector characters numbers. Check whether value element provided list. Boolean. \"\": true, apply logical operation filter. Default: false. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data transformer — track_data_transform","text":"list data transformations specs","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data transformer — track_data_transform","text":"info visit http://gosling-lang.org/docs/data#data-transform multiple ways transform data. Check documentation details usage.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data transformer — track_data_transform","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple data transforms — track_data_transforms","title":"Combine multiple data transforms — track_data_transforms","text":"Combine multiple data transforms","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple data transforms — track_data_transforms","text":"","code":"track_data_transforms(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple data transforms — track_data_transforms","text":"... Multiple data transform specs separated comma.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/track_data_transforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple data transforms — track_data_transforms","text":"list multiple data transform specs","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate gosling — use_gosling","title":"Initiate gosling — use_gosling","text":"Add function beginning ui. needed gosling work shiny plots.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate gosling — use_gosling","text":"","code":"use_gosling()"},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate gosling — use_gosling","text":"Gosling initiator HTML.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/use_gosling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate gosling — use_gosling","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic visual channel builder — visual_channel","title":"Generic visual channel builder — visual_channel","text":"Generic visual channel builder","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic visual channel builder — visual_channel","text":"","code":"visual_channel(field = NULL, type = NULL, range = NULL, domain = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic visual channel builder — visual_channel","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic visual channel builder — visual_channel","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic visual channel builder — visual_channel","text":"info visit http://gosling-lang.org/docs/visual-channel#encode--visual-channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":null,"dir":"Reference","previous_headings":"","what":"color visual channel — visual_channel_color","title":"color visual channel — visual_channel_color","text":"color visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"color visual channel — visual_channel_color","text":"","code":"visual_channel_color(   field = NULL,   title = NULL,   type = NULL,   scaleOffset = NULL,   scale = NULL,   legend = NULL,   grid = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"color visual channel — visual_channel_color","text":"field character. Name data field. title character. Title legend. Default: undefined. type character. Must \"genomic\". Specify data type. scaleOffset number vector form c(1, 2). Whether use offset domain proportionally. bound brushes color legend. Default: c(0, 1). scale character. One \"linear\", \"log\". legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"color visual channel — visual_channel_color","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"color visual channel — visual_channel_color","text":"info visit http://gosling-lang.org/docs/visual-channel#color","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"color visual channel — visual_channel_color","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":null,"dir":"Reference","previous_headings":"","what":"opacity visual channel — visual_channel_opacity","title":"opacity visual channel — visual_channel_opacity","text":"opacity visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"opacity visual channel — visual_channel_opacity","text":"","code":"visual_channel_opacity(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"opacity visual channel — visual_channel_opacity","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"opacity visual channel — visual_channel_opacity","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_opacity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"opacity visual channel — visual_channel_opacity","text":"info visit http://gosling-lang.org/docs/visual-channel#opacity","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":null,"dir":"Reference","previous_headings":"","what":"row visual channel — visual_channel_row","title":"row visual channel — visual_channel_row","text":"row visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"row visual channel — visual_channel_row","text":"","code":"visual_channel_row(   field = NULL,   type = NULL,   padding = NULL,   legend = NULL,   grid = NULL,   clip = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"row visual channel — visual_channel_row","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. padding number. Determines size inner white spaces top bottom individual rows. Default: 0. legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. clip Boolean. Clip row actual y value exceeds max value y scale. Used bar marks moment. Default: TRUE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"row visual channel — visual_channel_row","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"row visual channel — visual_channel_row","text":"info visit http://gosling-lang.org/docs/visual-channel#row","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"row visual channel — visual_channel_row","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # Circular track 1 ----   circular_track1_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\",     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4   )    circular_track1_x <- visual_channel_x(field = \"start\", type = \"genomic\")   circular_track1_xe <- visual_channel_x(field = \"end\", type = \"genomic\")    circular_track1_y <- visual_channel_y(field = \"peak\", type = \"quantitative\")    circular_track1_row <- visual_channel_row(     field = \"sample\", type = \"nominal\"   )    circular_track1_color <- visual_channel_color(     field = \"sample\", type = \"nominal\"   )    circular_track1_tracks <- add_multi_tracks(     add_single_track(       mark = \"bar\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-1\"),       color = \"blue\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-2\"),       color = \"red\"     )   )    circular_track1_styles <- default_track_styles(     outlineWidth = 0   )    circular_track1 <- add_single_track(     id = \"circular_track1\", alignment = \"overlay\", data = circular_track1_data,     x = circular_track1_x, xe = circular_track1_xe,     y = circular_track1_y, row = circular_track1_row,     color = circular_track1_color,     stroke =  \"black\", strokeWidth = 0.3,     tracks = circular_track1_tracks,     style = circular_track1_styles,     width = 500, height = 100   )    # Compose Circular track ----   circular_composed_view <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       circular_track1     ),     static = TRUE, layout = \"circular\", alignment = \"stack\"   )    # Arrange final view   circular_linear_view <- arrange_views(     arrangement = \"horizontal\",     views = list(circular_composed_view)   )       ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"circular_component\",         circular_linear_view, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":null,"dir":"Reference","previous_headings":"","what":"size visual channel — visual_channel_size","title":"size visual channel — visual_channel_size","text":"size visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"size visual channel — visual_channel_size","text":"","code":"visual_channel_size(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"size visual channel — visual_channel_size","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. Range specified like range = c(min_size, max_size) domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"size visual channel — visual_channel_size","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"size visual channel — visual_channel_size","text":"info visit http://gosling-lang.org/docs/visual-channel#size","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":null,"dir":"Reference","previous_headings":"","what":"stroke visual channel — visual_channel_stroke","title":"stroke visual channel — visual_channel_stroke","text":"stroke visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stroke visual channel — visual_channel_stroke","text":"","code":"visual_channel_stroke(   field = NULL,   title = NULL,   type = NULL,   scaleOffset = NULL,   legend = NULL,   grid = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stroke visual channel — visual_channel_stroke","text":"field character. Name data field. title character. Title legend. Default: undefined. type character. Must \"genomic\". Specify data type. scaleOffset number vector form c(1, 2). Whether use offset domain proportionally. bound brushes color legend. Default: c(0, 1). legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stroke visual channel — visual_channel_stroke","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stroke visual channel — visual_channel_stroke","text":"info visit http://gosling-lang.org/docs/visual-channel#stroke","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"stroke visual channel — visual_channel_stroke","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    track5_styles <- default_track_styles(     legendTitle = \"SV Class\"   )   track5_data <- track_data(     url = \"https://s3.amazonaws.com/gosling-lang.org/data/cancer/rearrangement.PD35930a.csv\",     type = \"csv\",     genomicFieldsToConvert = json_list(       json_list(         chromosomeField = \"chr1\",         genomicFields = c(\"start1\", \"end1\")       ),       json_list(         chromosomeField = \"chr2\",         genomicFields = c(\"start2\", \"end2\")       )     )   )   track5_tracks <- add_multi_tracks(     add_single_track(       mark = \"rect\"     ),     add_single_track(       mark = \"withinLink\", x = visual_channel_x(linkingId = \"mid-scale\"),       strokeWidth = 0     )   )   track5_color <- visual_channel_color(     field = \"svclass\",     type = \"nominal\",     legend = TRUE,     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_stroke <- visual_channel_stroke(     field = \"svclass\",     type = \"nominal\",     domain = json_list(       \"tandem-duplication\", \"translocation\", \"delection\", \"inversion\"     ),     range = json_list(       \"#569C4D\", \"#4C75A2\", \"#DA5456\", \"#EA8A2A\"     )   )   track5_x <- visual_channel_x(field = \"start1\", type = \"genomic\")   track5_xe <- visual_channel_x(field = \"end2\", type = \"genomic\")   track5 <- add_single_track(     id = \"track5\", title = \"Structural Variant\",     data = track5_data, mark = \"withinLink\",     x = track5_x, xe = track5_xe,     color = track5_color, width = 500, height = 80, stroke = track5_stroke,     strokeWidth = 1, opacity = 0.6, style = track5_styles   )    composed_track <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       track5     ),     xOffset = 190, layout = \"circular\", spacing = 1   )    composed_views <- arrange_views(     views = composed_track,     arrangement = \"vertical\"   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_2\",         composed_views, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":null,"dir":"Reference","previous_headings":"","what":"stroke width visual channel — visual_channel_stroke_width","title":"stroke width visual channel — visual_channel_stroke_width","text":"stroke width visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stroke width visual channel — visual_channel_stroke_width","text":"","code":"visual_channel_stroke_width(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stroke width visual channel — visual_channel_stroke_width","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stroke width visual channel — visual_channel_stroke_width","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_stroke_width.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"stroke width visual channel — visual_channel_stroke_width","text":"info visit http://gosling-lang.org/docs/visual-channel#strokewidth","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":null,"dir":"Reference","previous_headings":"","what":"text visual channel — visual_channel_text","title":"text visual channel — visual_channel_text","text":"text visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"text visual channel — visual_channel_text","text":"","code":"visual_channel_text(   field = NULL,   type = NULL,   range = NULL,   domain = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"text visual channel — visual_channel_text","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. range vector characters numbers. Values visual channel. domain vector characters numbers. Values data. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"text visual channel — visual_channel_text","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"text visual channel — visual_channel_text","text":"info visit http://gosling-lang.org/docs/visual-channel#text","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"text visual channel — visual_channel_text","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # View 2 Track 3----   view2_track3_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=NC_045512_2-multivec\",     type = \"multivec\",     row = \"base\",     column = \"position\",     value = \"count\",     categories = c(\"A\", \"T\", \"G\", \"C\"),     start = \"start\",     end = \"end\"   )    view2_track3a <- add_single_track(     mark = \"bar\",     y = visual_channel_y(       field = \"count\", type = \"quantitative\", axis = \"none\"     )   )    view2_track3b <- add_single_track(     dataTransform = track_data_transform(       type = \"filter\",       field = \"count\",       oneOf = list(0),       not = TRUE     ),     mark = \"text\",     x = visual_channel_x(       field = \"start\", type = \"genomic\"     ),     xe = visual_channel_x(       field = \"end\", type = \"genomic\"     ),     size = 24,     color = \"white\",     visibility = list(list(       operation = \"less-than\",       measure = \"width\",       threshold = \"|xe-x|\",       transitionPadding = 30,       target = \"mark\"     ),     list(       operation = \"LT\",       measure = \"zoomLevel\",       threshold = 40,       target = \"track\"     ))   )    view2_track3_x <- visual_channel_x(     field = \"position\", type = \"genomic\"   )    view2_track3_color <- visual_channel_color(     field = \"base\",     type = \"nominal\",     domain = c(\"A\", \"T\", \"G\", \"C\"),     legend = TRUE   )    view2_track3_text <- visual_channel_text(     field = \"base\", type = \"nominal\"   )    view2_track3_style <- default_track_styles(     inlineLegend = TRUE   )    view2_track3 <- add_single_track(     title = \"NC_045512.2 Sequence\",     alignment = \"overlay\",     data = view2_track3_data,     tracks = add_multi_tracks(       view2_track3a, view2_track3b     ),     x = view2_track3_x,     color = view2_track3_color,     text = view2_track3_text,     style = view2_track3_style,     width = 800, height = 40   )    view2 <- compose_view(     multi = TRUE,     centerRadius = 0,     xDomain = list(interval = c(1, 29903)),     linkingId = \"detail\",     alignment = \"stack\",     tracks = add_multi_tracks(       view2_track3     )   )    combined_view <- arrange_views(     title = \"SARS-CoV-2\",     subtitle = \"Data Source: WashU Virus Genome Browser, NCBI, GISAID\",     assembly = list(list(\"NC_045512.2\", 29903)),     layout = \"linear\",     spacing = 50,     views = list(view2),     listify = FALSE   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"sars_cov2\",         combined_view       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"tooltip visual channel — visual_channel_tooltip","title":"tooltip visual channel — visual_channel_tooltip","text":"tooltip visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tooltip visual channel — visual_channel_tooltip","text":"","code":"visual_channel_tooltip(field = NULL, type = NULL, alt = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tooltip visual channel — visual_channel_tooltip","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. alt character. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tooltip visual channel — visual_channel_tooltip","text":"List object. list object tooltip list object","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tooltip visual channel — visual_channel_tooltip","text":"info visit https://gosling.js.org/ check tooltip implementation","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tooltip visual channel — visual_channel_tooltip","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine tooltips into a list — visual_channel_tooltips","title":"Combine tooltips into a list — visual_channel_tooltips","text":"Combine tooltips list","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine tooltips into a list — visual_channel_tooltips","text":"","code":"visual_channel_tooltips(...)"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine tooltips into a list — visual_channel_tooltips","text":"... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine tooltips into a list — visual_channel_tooltips","text":"List object. json list tooltips combined single spec","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_tooltips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine tooltips into a list — visual_channel_tooltips","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":null,"dir":"Reference","previous_headings":"","what":"x and xe axis visual channel — visual_channel_x","title":"x and xe axis visual channel — visual_channel_x","text":"x xe axis visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"x and xe axis visual channel — visual_channel_x","text":"","code":"visual_channel_x(   field = NULL,   type = NULL,   legend = NULL,   grid = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"x and xe axis visual channel — visual_channel_x","text":"field character. Name data field. type character. Must \"genomic\". Specify data type. legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"x and xe axis visual channel — visual_channel_x","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"x and xe axis visual channel — visual_channel_x","text":"info visit http://gosling-lang.org/docs/visual-channel#x--xe","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"x and xe axis visual channel — visual_channel_x","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"download_pdf\",           \"PDF\",           icon = icon(\"cloud-arrow-down\")         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$download_pdf, {       export_pdf(component_id = \"component_1\")     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":null,"dir":"Reference","previous_headings":"","what":"y and ye axis visual channel — visual_channel_y","title":"y and ye axis visual channel — visual_channel_y","text":"y ye axis visual channel","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"y and ye axis visual channel — visual_channel_y","text":"","code":"visual_channel_y(   field = NULL,   zeroBaseline = NULL,   type = NULL,   legend = NULL,   grid = NULL,   flip = NULL,   baseline = NULL,   axis = NULL,   aggregate = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"y and ye axis visual channel — visual_channel_y","text":"field character. Name data field. zeroBaseline Boolean. Specify whether use zero baseline. Default: TRUE. type character. Must \"genomic\". Specify data type. legend Boolean. Whether display legend. Default: FALSE. grid Boolean. Whether display grid. Default: FALSE. flip Boolean. Whether flip y-axis. done inverting range property. Default: FALSE. baseline character number. Custom baseline y-axis. Default: 0. axis character. One \"none\", \"top\", \"bottom\", \"left\", \"right\". Specify axis put. aggregate character. One \"max\", \"min\", \"mean\", \"bin\", \"count\". Specify aggregate data. Default: undefined. ... parameters pass gosling.js.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"y and ye axis visual channel — visual_channel_y","text":"List object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"y and ye axis visual channel — visual_channel_y","text":"info visit http://gosling-lang.org/docs/visual-channel#y--ye","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/visual_channel_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"y and ye axis visual channel — visual_channel_y","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    # Circular track 1 ----   circular_track1_data <- track_data(     url = \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\",     type = \"multivec\",     row = \"sample\",     column = \"position\",     value = \"peak\",     categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),     binSize = 4   )    circular_track1_x <- visual_channel_x(field = \"start\", type = \"genomic\")   circular_track1_xe <- visual_channel_x(field = \"end\", type = \"genomic\")    circular_track1_y <- visual_channel_y(field = \"peak\", type = \"quantitative\")    circular_track1_row <- visual_channel_row(     field = \"sample\", type = \"nominal\"   )    circular_track1_color <- visual_channel_color(     field = \"sample\", type = \"nominal\"   )    circular_track1_tracks <- add_multi_tracks(     add_single_track(       mark = \"bar\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-1\"),       color = \"blue\"     ),     add_single_track(       mark = \"brush\",       x = visual_channel_x(linkingId = \"detail-2\"),       color = \"red\"     )   )    circular_track1_styles <- default_track_styles(     outlineWidth = 0   )    circular_track1 <- add_single_track(     id = \"circular_track1\", alignment = \"overlay\", data = circular_track1_data,     x = circular_track1_x, xe = circular_track1_xe,     y = circular_track1_y, row = circular_track1_row,     color = circular_track1_color,     stroke =  \"black\", strokeWidth = 0.3,     tracks = circular_track1_tracks,     style = circular_track1_styles,     width = 500, height = 100   )    # Compose Circular track ----   circular_composed_view <- compose_view(     multi = TRUE,     tracks = add_multi_tracks(       circular_track1     ),     static = TRUE, layout = \"circular\", alignment = \"stack\"   )    # Arrange final view   circular_linear_view <- arrange_views(     arrangement = \"horizontal\",     views = list(circular_composed_view)   )       ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\"))     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"circular_component\",         circular_linear_view, clean_braces = FALSE       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom to — zoom_to","title":"Zoom to — zoom_to","text":"Zooms  specific genomic position animated transition.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom to — zoom_to","text":"","code":"zoom_to(   component_id,   view_id,   position,   padding = 0,   duration = 1000,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom to — zoom_to","text":"component_id character. id component_id prop passed GoslingComponent function. view_id character. ID view want control. ID consistent specify track.id spec. position character. genomic position view navigated . can either specify chromosome (e.g., chr1) chromosome range pair (e.g., chr1:1-10000). padding numeric.  determines padding around specified position. unit number base pair (Default: 0). duration numeric. duration animated transition ms (Default: 1000). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zoom to — zoom_to","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zoom to — zoom_to","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    chromosome_options <- c(     \"Chr 1\" = \"chr1\",     \"Chr 2\" = \"chr2\",     \"Chr X\" = \"chrX\",     \"Chr Y\" = \"chrY\"   )    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"zoom_out\",           \"Zoom To\"         )       ),       column(         2,         selectInput(           \"chromosomes\",           \"Chromosome\",           selected = \"chr1\",           choices = chromosome_options         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$zoom_out, {       zoom_to(         component_id = \"component_1\",         view_id = \"track1\",         position = input$chromosomes       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom to extent — zoom_to_extent","title":"Zoom to extent — zoom_to_extent","text":"Zooms see entire view_id passed function.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom to extent — zoom_to_extent","text":"","code":"zoom_to_extent(   component_id,   view_id,   duration = 1000,   session = getDefaultReactiveDomain() )"},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom to extent — zoom_to_extent","text":"component_id character. id component_id prop passed GoslingComponent function. view_id character. ID view want control. ID consistent specify track.id spec. duration numeric. duration animated transition ms (Default: 1000). session shiny session object.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zoom to extent — zoom_to_extent","text":"None.","code":""},{"path":"https://appsilon.github.io/shiny.gosling/reference/zoom_to_extent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zoom to extent — zoom_to_extent","text":"","code":"if(interactive()) {   library(shiny)   library(shiny.gosling)    cistrome_data <-     \"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec\"    single_track <- add_single_track(     id = \"track1\",     data = track_data(       url = cistrome_data,       type = \"multivec\",       row = \"sample\",       column = \"position\",       value = \"peak\",       categories = c(\"sample 1\", \"sample 2\", \"sample 3\", \"sample 4\"),       binSize = 4,     ),     mark = \"rect\",     x = visual_channel_x(field = \"start\", type = \"genomic\", axis = \"top\"),     xe = visual_channel_x(field = \"end\", type = \"genomic\"),     row = visual_channel_row(       field = \"sample\",       type = \"nominal\",       legend = TRUE     ),     color = visual_channel_color(       field = \"peak\",       type = \"quantitative\",       legend = TRUE     ),     tooltip = visual_channel_tooltips(       visual_channel_tooltip(field = \"start\", type = \"genomic\",                              alt = \"Start Position\"),       visual_channel_tooltip(field = \"end\", type = \"genomic\",                              alt = \"End Position\"),       visual_channel_tooltip(         field = \"peak\",         type = \"quantitative\",         alt = \"Value\",         format = \"0.2\"       )     ),     width = 600,     height = 130   )    single_composed_track <- compose_view(     tracks = single_track   )    single_composed_views <- arrange_views(     title = \"Single Track\",     subtitle = \"This is the simplest single track visualization with a linear layout\",     layout = \"circular\", #\"linear\"     views = single_composed_track,     xDomain = list(       chromosome = \"chr1\",       interval = c(1, 3000500)     )   )    ui <- fluidPage(     use_gosling(),     fluidRow(       column(6, goslingOutput(\"gosling_plot\")),       column(         1, br(), actionButton(           \"zoom_out\",           \"Zoom Out\"         )       )     )   )     server <- function(input, output, session) {     output$gosling_plot <- renderGosling({       gosling(         component_id = \"component_1\",         single_composed_views,         clean_braces = TRUE       )     })      observeEvent(input$zoom_out, {       zoom_to_extent(         component_id = \"component_1\",         view_id = \"track1\"       )     })   }    shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.gosling/news/index.html","id":"shinygosling-0990","dir":"Changelog","previous_headings":"","what":"shiny.gosling 0.99.0","title":"shiny.gosling 0.99.0","text":"Added NEWS.md file track changes package.","code":""}]
